<!-- create_item_blueprint_form -->
<form
  id="createItemBlueprintForm"
  class="sideForm"
  style="display: none"
  autocomplete="off"
>
  <ul>
    <li>
      <a class="cancelButton" id="cancelCreateItemBlueprintForm"> Cancel </a>
    </li>
  </ul>
  <h2>Create Item Blueprint</h2>
  <ul>
    <li>
      <label for="createItemName">Name:</label>
      <input
        id="createItemName"
        name="createItemName"
        type="text"
        maxlength="36"
        required
      />
    </li>
    <li>
      <label for="createItemKeywords">Keywords:</label>
      <input
        id="createItemKeywords"
        name="createItemKeywords"
        type="text"
        maxlength="80"
        required
      />
    </li>

    <li style="display: inline-block">
      <label for="createItemType">Type:</label>
      <select id="createItemType" name="createItemType" required>
        <option value="armor">armor</option>
        <option value="fishing_rod">fishing rod</option>
        <option value="gold">gold</option>
        <option value="key">key</option>
        <option value="none" selected>none</option>
        <option value="potion">potion</option>
        <option value="scroll">scroll</option>
        <option value="token">token</option>
        <option value="treasure">treasure</option>
        <option value="wand">wand</option>
        <option value="weapon">weapon</option>
      </select>
    </li>
    <li style="display: inline-block">
      <label for="createItemMinimumLevel">MinLvl:</label>
      <input
        style="width: 3.9rem; margin-right: 0"
        type="number"
        id="createItemMinimumLevel"
        name="createItemMinimumLevel"
        min="0"
        max="31"
        value="0"
        required
      />
    </li>

    <li style="display: inline-block">
      <label for="createItemPrice">Price:</label>
      <input
        class="stubbySelect"
        type="number"
        id="createItemPrice"
        name="createItemPrice"
        min="0"
        max="100000"
        value="0"
        required
      />
    </li>
    <li style="display: inline-block">
      <label for="createItemIsContainer">Container: </label>
      <input
        type="checkbox"
        id="createItemIsContainer"
        name="createItemIsContainer"
      />
    </li>

    <h3>Description</h3>
    <li>
      <label for="createItemLook">Look:</label>
      <input
        id="createItemLook"
        name="createItemLook"
        type="text"
        maxlength="80"
        required
      />
    </li>
    <li>
      <label for="createItemExamine">Examine:</label>
      <textarea
        id="createItemExamine"
        name="createItemExamine"
        type="text"
        maxlength="240"
      ></textarea>
    </li>
  </ul>

  <ul>
    <li>
      <button type="submit">Create Item Blueprint</button>
    </li>
  </ul>
</form>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const createItemBlueprintForm = document.getElementById(
      "createItemBlueprintForm"
    );
    const createItemName = document.getElementById("createItemName");
    const createItemPrice = document.getElementById("createItemPrice");
    const createItemMinimumLevel = document.getElementById(
      "createItemMinimumLevel"
    );
    const createItemType = document.getElementById("createItemType");
    const createItemLook = document.getElementById("createItemLook");
    const createItemExamine = document.getElementById("createItemExamine");
    const createItemIsContainer = document.getElementById(
      "createItemIsContainer"
    );

    let itemTypes;

    createItemBlueprintForm.addEventListener("submit", (e) => {
      //validate & sanitize data
      e.preventDefault();
      const keywords = document
        .getElementById("createItemKeywords")
        .value.split(/[ ,]+/);
      const purifiedKeywords = keywords.map((keyword) =>
        DOMPurify.sanitize(keyword)
      );

      //package data
      const createItemBlueprintFormData = {
        name: DOMPurify.sanitize(createItemName.value),
        keywords: purifiedKeywords,
        price: createItemPrice.value,
        minimumLevel: createItemMinimumLevel.value,
        itemType: createItemType.value,
        description: {
          look: DOMPurify.sanitize(createItemLook.value),
          examine: DOMPurify.sanitize(createItemExamine.value),
          study: "",
          research: "",
        },
        tags: {
          cleric: true,
          mage: true,
          rogue: true,
          warrior: true,
          dark: true,
          neutral: true,
          light: true, //can be equipped by players with a light aura
          guild: false,
          food: false,
          lamp: false, //lights up the room
          hidden: false,
          fixture: false,
          quest: false,
          temporary: false,
          container: createItemIsContainer.checked,
        },
      };

      socket.emit(
        "userSubmittedCreateItemBlueprint",
        createItemBlueprintFormData
      );
      createItemBlueprintForm.reset();
      createItemBlueprintForm.style.display = "none";
    });

    document
      .getElementById("cancelCreateItemBlueprintForm")
      .addEventListener("click", function () {
        createItemBlueprintForm.style.display = "none";
      });

    socket.on("openCreateItemBlueprintForm", (formData) => {
      itemTypes = formData.itemTypes;
      generateStringSelectOptions(itemTypes, createItemType);      
      resetActiveSidebarElementTo(createItemBlueprintForm);
    });
  });
</script>
