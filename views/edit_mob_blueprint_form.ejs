<!-- edit_mob_blueprint_form -->
<form
  id="editMobBlueprintForm"
  class="sideForm"
  style="display: none"
  autocomplete="off"
>
  <ul>
    <li>
      <a class="cancelButton" id="cancelEditMobBlueprintForm"> Cancel </a>
    </li>
  </ul>
  <h2>
    Edit Mob
    <span class="nodeId" id="editMobIdDisplay"
      >Error: Mob Id should be here</span
    >
  </h2>
  <div class="tabs">
    <button
      id="editMobGeneralTab"
      type="button"
      class="tab-link edit-mob-tab-link active"
      data-tab="editMobGeneralSection"
    >
      General
    </button>
    <button
      id="editMobDescriptionTab"
      type="button"
      class="tab-link edit-mob-tab-link"
      data-tab="editMobDescriptionSection"
    >
      Desc.
    </button>
    <button
      id="editMobItemNodesTab"
      type="button"
      class="tab-link edit-mob-tab-link"
      data-tab="editMobItemNodesSection"
    >
      ItemNodes
    </button>
    <button
      id="editMobAffixesTab"
      type="button"
      class="tab-link edit-mob-tab-link"
      data-tab="editMobAffixesSection"
    >
      Affixes
    </button>
  </div>

  <section
    class="tab-content edit-mob-tab-content"
    id="editMobGeneralSection"
    style="display: block"
  >
    <ul>
      <li>
        <label for="editMobSelectMob">Mob:</label>
        <select id="editMobSelectMob" name="editMobSelectMob" required>
          <!-- populated by script -->
        </select>
      </li>
      <li>
        <label for="editMobName">Name:</label>
        <input
          id="editMobName"
          name="editMobName"
          type="text"
          maxlength="36"
          required
        />
      </li>
      <li>
        <label for="editMobKeywords">Keywords:</label>
        <input
          id="editMobKeywords"
          name="editMobKeywords"
          maxlength="80"
          required
        />
      </li>
      <li>
        <label for="editMobPronouns">Pronouns:</label>
        <select
          id="editMobPronouns"
          name="editMobPronouns"
          type="number"
          required
        >
          <option value="0">He/Him</option>
          <option value="1">It/It</option>
          <option value="2">She/Her</option>
          <option value="3">They/Them</option>
        </select>
        <label style="min-width: 3rem" for="editMobLevel">Level:</label>
        <input
          style="width: 3.9rem"
          type="number"
          id="editMobLevel"
          name="editMobLevel"
          min="1"
          max="31"
          value="1"
          required
        />
      </li>
      <li>
        <label for="editMobJob">Job:</label>
        <select id="editMobJob" name="editMobJob" required>
          <option value="cleric">Cleric</option>
          <option value="mage">Mage</option>
          <option value="rogue">Rogue</option>
          <option value="warrior">Warrior</option>
        </select>
        <label for="editMobSpi" style="min-width: 3rem">Spirit:</label>
        <input
          style="width: 6rem"
          id="editMobSpi"
          name="editMobSpi"
          type="number"
          min="-1000"
          max="1000"
          value="0"
          required
        />
      </li>
      <!-- statBlock -->
      <li>
        <label for="editMobStr">Str:</label>
        <input
          style="width: 3.9rem"
          type="number"
          id="editMobStr"
          name="editMobStr"
          min="4"
          max="18"
          value="10"
          required
        />
        <label for="editMobDex" style="min-width: 3rem">Dex:</label>
        <input
          style="width: 3.9rem"
          type="number"
          id="editMobDex"
          name="editMobDex"
          min="4"
          max="18"
          value="10"
          required
        />
        <label for="editMobCon" style="min-width: 3rem">Con:</label>
        <input
          style="width: 3.9rem"
          type="number"
          id="editMobCon"
          name="editMobCon"
          min="4"
          max="18"
          value="10"
          required
        />
      </li>
      <li>
        <label for="editMobInt">Int:</label>
        <input
          style="width: 3.9rem"
          type="number"
          id="editMobInt"
          name="editMobInt"
          min="4"
          max="18"
          value="10"
          required
        />
        <label for="editMobWis" style="min-width: 3rem">Wis:</label>
        <input
          style="width: 3.9rem"
          type="number"
          id="editMobWis"
          name="editMobWis"
          min="4"
          max="18"
          value="10"
          required
        />
      </li>
      <li>
        <label for="editMobIsUnique"> </label>
        <input
          type="checkbox"
          id="editMobIsUnique"
          name="editMobIsUnique"
          value="editMobIsUnique"
        />
        <label for="editMobIsUnique" style="min-width: 3rem">Unique</label>
        <input
          type="checkbox"
          id="editMobIsMount"
          name="editMobIsMount"
          value="editMobIsMount"
        />
        <label for="editMobIsMount" style="min-width: 3rem">Mount</label>

        <input
          type="checkbox"
          id="editMobIsAggressive"
          name="editMobIsAggressive"
          value="editMobIsAggressive"
        />
        <label for="editMobIsAggressive" style="min-width: 3rem"
          >Aggressive</label
        >
      </li>
    </ul>
  </section>

  <section
    class="tab-content edit-mob-tab-content"
    id="editMobDescriptionSection"
    style="display: none"
  >
    <h3>Description</h3>
    <ul>
      <li>
        <label for="editLookMob">Look:</label>
        <input id="editLookMob" name="editLookMob" type="text" maxlength="80" />
      </li>
      <li>
        <label for="editExamineMob">Examine:</label>
        <textarea
          id="editExamineMob"
          name="editExamineMob"
          type="text"
          maxlength="240"
        ></textarea>
      </li>
      <li>
        <label for="editStudyMob">Study:</label>
        <textarea
          id="editStudyMob"
          name="editStudyMob"
          type="text"
          maxlength="640"
        ></textarea>
      </li>
      <li>
        <label for="editResearchMob">Research:</label>
        <textarea
          id="editResearchMob"
          name="editResearchMob"
          type="text"
          maxlength="1600"
        ></textarea>
      </li>
    </ul>
  </section>
  <section
    class="tab-content edit-mob-tab-content"
    id="editMobItemNodesSection"
    style="display: none"
  >
    <h3>Item Nodes</h3>
    <ul class="nodeList" id="editMobItemNodeList">
      <!-- loaded via script -->
    </ul>
    <ul class="addNodeContainer">
      <li>
        <!-- item select and add button -->
        <select
          id="editMobItemNodeSelect"
          name="editMobItemNodeSelect"
          required
        >
          <!-- populated by script -->
        </select>
        <button type="button" class="addNode" id="editMobItemNodeAdd">
          add
        </button>
      </li>
    </ul>
  </section>
  <section
    class="tab-content edit-mob-tab-content"
    id="editMobAffixesSection"
    style="display: none"
  >
    <h3>Affixes</h3>
    <ul>
      <li>
        <label for="editMobAffix1">Affix1:</label>
        <select id="editMobAffix1" name="editMobAffix1" required>
          <!-- populated by script -->
        </select>
      </li>
      <li>
        <label for="editMobAffix2">Affix2:</label>
        <select id="editMobAffix2" name="editMobAffix2" required>
          <!-- populated by script -->
        </select>
      </li>
      <li>
        <label for="editMobAffix3">Affix3:</label>
        <select id="editMobAffix3" name="editMobAffix3" required>
          <!-- populated by script -->
        </select>
      </li>
      <li>
        <label for="editMobAffix4">Affix4:</label>
        <select id="editMobAffix4" name="editMobAffix4" required>
          <!-- populated by script -->
        </select>
      </li>
      <li>
        <label for="editMobAffix5">Affix5:</label>
        <select id="editMobAffix5" name="editMobAffix5" required>
          <!-- populated by script -->
        </select>
      </li>
    </ul>
  </section>
  <ul>
    <li>
      <button type="submit">Update Mob</button>
    </li>
  </ul>
</form>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const editMobBlueprintForm = document.getElementById(
      "editMobBlueprintForm"
    );

    const editMobTabLinks = document.querySelectorAll(".edit-mob-tab-link");
    const editMobTabContents = document.querySelectorAll(
      ".edit-mob-tab-content"
    );

    const editMobGeneralTab = document.getElementById("editMobGeneralTab");
    const editMobDescriptionTab = document.getElementById(
      "editMobDescriptionTab"
    );
    const editMobItemNodesTab = document.getElementById("editMobItemNodesTab");
    const editMobAffixesTab = document.getElementById("editMobAffixesTab");

    const editMobIdDisplay = document.getElementById("editMobIdDisplay");

    const editMobGeneralSection = document.getElementById(
      "editMobGeneralSection"
    );
    const editMobSelectMob = document.getElementById("editMobSelectMob");
    const editMobName = document.getElementById("editMobName");
    const editMobKeywords = document.getElementById("editMobKeywords");
    const editMobPronouns = document.getElementById("editMobPronouns");
    const editMobLevel = document.getElementById("editMobLevel");
    const editMobJob = document.getElementById("editMobJob");
    const editMobSpi = document.getElementById("editMobSpi");
    const editMobStr = document.getElementById("editMobStr");
    const editMobDex = document.getElementById("editMobDex");
    const editMobCon = document.getElementById("editMobCon");
    const editMobInt = document.getElementById("editMobInt");
    const editMobWis = document.getElementById("editMobWis");
    const editMobIsUnique = document.getElementById("editMobIsUnique");
    const editMobIsMount = document.getElementById("editMobIsMount");
    const editMobIsAggressive = document.getElementById("editMobIsAggressive");

    const editMobDescriptionSection = document.getElementById(
      "editMobDescriptionSection"
    );
    const editLookMob = document.getElementById("editLookMob");
    const editExamineMob = document.getElementById("editExamineMob");
    const editStudyMob = document.getElementById("editStudyMob");
    const editResearchMob = document.getElementById("editResearchMob");

    const editMobItemNodesSection = document.getElementById(
      "editMobItemNodesSection"
    );
    const editMobItemNodeList = document.getElementById("editMobItemNodeList");
    const editMobItemNodeSelect = document.getElementById(
      "editMobItemNodeSelect"
    );

    const editMobAffixesSection = document.getElementById(
      "editMobAffixesSection"
    );
    const editMobAffix1 = document.getElementById("editMobAffix1");
    const editMobAffix2 = document.getElementById("editMobAffix2");
    const editMobAffix3 = document.getElementById("editMobAffix3");
    const editMobAffix4 = document.getElementById("editMobAffix4");
    const editMobAffix5 = document.getElementById("editMobAffix5");

    // help arrays to message user when they click each tab
    const editMobGeneralHelp = [
      `================================== Edit Mob ===================================`,
      `<span style="color:var(--red)">Name:</span> e.g '<span style="color: var(--green_light)">a green goblin</span>' or '<span style="color: var(--green_light)">Greg the blacksmith'</span>`,
      `<span style="color:var(--red)">Keywords:</span> e.g 'goblin, green' or 'blacksmith, Greg'`,
      `<span style="color:var(--red)">Pronouns:</span> Pronouns may appear in place of a name ("Greg eats." vs "<u>He</u> eats.").`,
      `<span style="color:var(--red)">Level:</span> A mob's level determines its stats, and what spells and abilities it has learned.`,
      `<span style="color:var(--red)">Job:</span> A job determines abilities and combat style.`,
      ];
    const editMobDescriptionHelp = [
      `============================== Mob Description ===============================`,
      `<span style="color:var(--red)">Look:</span> This is how the player sees the mob when they look or enter the room.`,
      `<span style="color:var(--red)">Examine:</span> The player sees this paragraph when they examine the mob.`,
      `<span style="color:var(--red)">Study:</span> The player learns some history when they study the mob.`,
      `<span style="color:var(--red)">Research:</span> These paragraphs tell the full history of the mob.`,
      `  A good research text rewards the reader with some secrets about the mob.`,
    ];
    const editMobItemNodesHelp = [
      `================================ Item Nodes ==================================`,
      `An item node spawns that item in the mob's inventory when the mob spawns.`,
      `Choose an item and click <span style="color:var(--green)">add</span> to create an item node for it.`,
      `Click <span style="color:var(--red)">remove</span> next to an existing node to remove it.`,
      `These changes won't be saved until you click "Update Item".`,
    ];
    const editMobAffixesHelp = [
      `================================ Mob Affixes ================================`,
      `An affix boosts a mob's stat 'naturally' regardless of equipment.`,
      `Each stat has its own help file describing its effects (e.g. HELP DEXTERITY)`,
      `A mob can have up to 5 affixes, and it's okay for some mobs to have none. `,
      `It's okay to have more than one affix on the same stat,`,
      `e.g. for a double or triple boost to dexterity on the same goblin thief.`,
    ];

    // to hold data from server on "edit item" command
    let selectedMob;
    let itemBlueprintNames;
    let mobBlueprintFullData;
    let selectedMobId = "";
    let affixTypes;

    // Tab menu listeners
    editMobTabLinks.forEach((link) => {
      link.addEventListener("click", function () {
        // Remove active class from all tab links and sections
        editMobTabLinks.forEach((link) => link.classList.remove("active"));
        editMobTabContents.forEach((section) =>
          section.classList.remove("active")
        );
        editMobTabContents.forEach(
          (section) => (section.style.display = "none")
        );

        // Add active class to the clicked tab and corresponding section
        this.classList.add("active");
        const target = document.getElementById(this.getAttribute("data-tab"));
        target.classList.add("active");
        target.style.display = "block";
      });
    });
    editMobGeneralTab.addEventListener("click", () =>
      showHelpArray(editMobGeneralHelp)
    );
    editMobDescriptionTab.addEventListener("click", () =>
      showHelpArray(editMobDescriptionHelp)
    );
    editMobItemNodesTab.addEventListener("click", () =>
      showHelpArray(editMobItemNodesHelp)
    );
    editMobAffixesTab.addEventListener("click", () =>
      showHelpArray(editMobAffixesHelp)
    );

    editMobBlueprintForm.addEventListener("submit", (e) => {
      e.preventDefault();
      const keywords = document
        .getElementById("editMobKeywords")
        .value.split(/[ ,]+/);
      const purifiedKeywords = object.keywords.map((keyword) =>
        DOMPurify.sanitize(keyword)
      );
      const editMobBlueprintFormData = {
        name: DOMPurify.sanitize(editMobName.value) || "no mob name",
        keywords: purifiedKeywords,
        pronouns: Number(editMobPronouns).value || 1,
        level: Number(editMobLevel.value) || 1,
        job: editMobJob.value || "warrior",
        statBlock: {
          strength: Number(editMobStr.value) || 10,
          dexterity: Number(editMobDex.value) || 10,
          constitution: Number(editMobCon.value) || 10,
          intelligence: Number(editMobInt.value) || 10,
          wisdom: Number(editMobWis.value) || 10,
          charisma: 10,
          spirit: Number(editMobSpi.value) || 0,
        },
        isUnique: editMobIsUnique.checked || false,
        isMount: editMobIsMount.checked || false,
        isAggressive: editMobIsAggressive.checked || false,
        description: {
          look: DOMPurify.sanitize(editLookMob.value) || "",
          examine: DOMPurify.sanitize(editExamineMob.value) || "",
          study: DOMPurify.sanitize(editStudyMob.value) || "",
          research: DOMPurify.sanitize(editResearchMob.value) || "",
        },
        itemNodes: selectedMob.itemNodes,
        affixes: [],
      };
      if (editMobAffix1.value !== "none") {
        editMobBlueprintFormData.affixes.push({
          affixType: editMobAffix1.value,
          value: 1,
        });
      }
      if (editMobAffix2.value !== "none") {
        editMobBlueprintFormData.affixes.push({
          affixType: editMobAffix2.value,
          value: 1,
        });
      }
      if (editMobAffix3.value !== "none") {
        editMobBlueprintFormData.affixes.push({
          affixType: editMobAffix3.value,
          value: 1,
        });
      }
      if (editMobAffix4.value !== "none") {
        editMobBlueprintFormData.affixes.push({
          affixType: editMobAffix4.value,
          value: 1,
        });
      }
      if (editMobAffix5.value !== "none") {
        editMobBlueprintFormData.affixes.push({
          affixType: editMobAffix5.value,
          value: 1,
        });
      }
      socket.emit(
        "userSubmittedEditMobBlueprint",
        selectedMobId,
        editMobBlueprintFormData
      );
      editMobBlueprintForm.reset();
      editMobBlueprintForm.style.display = "none";
    });

    document
      .getElementById("cancelEditMobBlueprintForm")
      .addEventListener("click", function () {
        editMobBlueprintForm.style.display = "none";
      });

    // click listener logic for "Add" button on item node select
    document
      .getElementById("editMobItemNodeAdd")
      .addEventListener("click", () => {
        //push new node to list
        if (!selectedMob.itemNodes) {
          selectedMob.itemNodes = [];
        }
        selectedMob.itemNodes.push({
          _id: Math.floor(Math.random() * 1000000000), // server will generate legit id on zone save
          loadsBlueprintId: editMobItemNodeSelect.value,
        });
        //reload nodeList
        clearUl(editMobItemNodeList);
        loadNodesToUlElement(
          editMobItemNodeList,
          selectedMob.itemNodes,
          itemBlueprintNames
        );
      });

    socket.on("openEditMobBlueprintForm", (formData) => {
      mobBlueprintNames = formData.mobBlueprintNames;
      mobBlueprintFullData = formData.mobBlueprintFullData;
      itemBlueprintNames = formData.itemBlueprintNames;
      affixTypes = formData.affixTypes;

      // prepare fresh editMobBlueprintForm
      editMobBlueprintForm.reset();
      clearUl(editMobItemNodeList);
      generateStringSelectOptions(mobBlueprintNames, editMobSelectMob);
      generateStringSelectOptions(itemBlueprintNames, editMobItemNodeSelect);
      generateStringSelectOptions(affixTypes, editMobAffix1);
      generateStringSelectOptions(affixTypes, editMobAffix2);
      generateStringSelectOptions(affixTypes, editMobAffix3);
      generateStringSelectOptions(affixTypes, editMobAffix4);
      generateStringSelectOptions(affixTypes, editMobAffix5);

      //reset/hide open forms, show editMobBlueprintForm
      activeForm.reset();
      activeForm.style.display = "none";
      activeForm = editMobBlueprintForm;
      activeForm.style.display = "block";
      document.querySelector("#editMobGeneralTab").click();
      input.value = "";
      selectedMobId = mobBlueprintNames[0]._id;
      populateEditMobFieldsFromId(selectedMobId);
    });

    editMobSelectMob.addEventListener("change", (e) => {
      selectedMobId = e.target.value;
      clearUl(editMobItemNodeList);
      populateEditMobFieldsFromId(selectedMobId);
    });

    function populateEditMobFieldsFromId(selectedMobId) {
      // Find the selected mob data
      selectedMob = mobBlueprintFullData.find(
        (mob) => mob._id === selectedMobId
      );
      if (selectedMob) {
        // Populate the form fields
        editMobIdDisplay.textContent =
          `Id: ${selectedMob._id}` || "error: no mobId";
        editMobName.value = selectedMob.name || "";
        editMobKeywords.value = selectedMob.keywords.join(", ") || "";
        editMobPronouns.value = selectedMob.pronouns || 0;
        editMobLevel.value = selectedMob.level || 0;
        editMobJob.value = selectedMob.job || "warrior";
        editMobSpi.value = selectedMob.statBlock.spirit || 0;
        editMobStr.value = selectedMob.statBlock.strength || 10;
        editMobDex.value = selectedMob.statBlock.dexterity || 10;
        editMobCon.value = selectedMob.statBlock.constitution || 10;
        editMobInt.value = selectedMob.statBlock.intelligence || 10;
        editMobWis.value = selectedMob.statBlock.wisdom || 10;
        editMobIsUnique.checked = selectedMob.isUnique || false;
        editMobIsMount.checked = selectedMob.IsMount || false;
        editMobIsAggressive.checked = selectedMob.IsAggressive || false;
        editLookMob.value = selectedMob.description.look || "";
        editExamineMob.value = selectedMob.description.examine || "";
        editStudyMob.value = selectedMob.description.study || "";
        editResearchMob.value = selectedMob.description.research || "";

        if (selectedMob.itemNodes) {
          loadNodesToUlElement(
            editMobItemNodeList,
            selectedMob.itemNodes,
            itemBlueprintNames
          );
        }

        if (selectedMob.affixes) {
          if (selectedMob.affixes[0]) {
            editMobAffix1.value = selectedMob.affixes[0].affixType || "none";
          }
          if (selectedMob.affixes[1]) {
            editMobAffix2.value = selectedMob.affixes[1].affixType || "none";
          }
          if (selectedMob.affixes[2]) {
            editMobAffix3.value = selectedMob.affixes[2].affixType || "none";
          }
          if (selectedMob.affixes[3]) {
            editMobAffix4.value = selectedMob.affixes[3].affixType || "none";
          }
          if (selectedMob.affixes[4]) {
            editMobAffix5.value = selectedMob.affixes[4].affixType || "none";
          }
        }
      }
    }
  });
</script>
