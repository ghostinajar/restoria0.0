<!-- Edit room form -->
<form
  id="editRoomForm"
  class="sideForm"
  style="display: none"
  autocomplete="off"
>
  <ul>
    <li>
      <a class="cancelButton" id="cancelEditRoomForm"> Cancel </a>
    </li>
  </ul>
  <h2>
    Edit Room
    <span class="nodeId" id="roomId">Error: Room Id should be here</span>
  </h2>
  <div class="tabs">
    <button
      id="editRoomFirstTabLink"
      type="button"
      class="tab-link edit-room-tab-link active"
      data-tab="editRoomDescriptionSection"
    >
      Description
    </button>
    <button
      type="button"
      class="tab-link edit-room-tab-link"
      data-tab="editRoomTagsSection"
    >
      Tags
    </button>
    <button
      type="button"
      class="tab-link edit-room-tab-link"
      data-tab="editRoomExitsSection"
    >
      Exits
    </button>
    <button
      type="button"
      class="tab-link edit-room-tab-link"
      data-tab="editRoomMobNodesSection"
    >
      MobNodes
    </button>
    <button
      type="button"
      class="tab-link edit-room-tab-link"
      data-tab="editRoomItemNodesSection"
    >
      ItemNodes
    </button>
  </div>
  <section
    class="tab-content edit-room-tab-content"
    id="editRoomDescriptionSection"
    style="display: block"
  >
    <h3>Description</h3>
    <ul>
      <li>
        <label for="roomName">Name</label>
        <input
          id="roomName"
          name="roomName"
          type="text"
          maxlength="60"
          required
        />
      </li>
      <li>
        <label for="examineRoom">Examine</label>
        <textarea
          id="examineRoom"
          name="examineRoom"
          maxlength="240"
        ></textarea>
      </li>
      <li>
        <label for="studyRoom">Study</label>
        <textarea id="studyRoom" name="studyRoom" maxlength="640"></textarea>
      </li>
      <li>
        <label for="researchRoom">Research</label>
        <textarea
          id="researchRoom"
          name="researchRoom"
          maxlength="1600"
        ></textarea>
      </li>
    </ul>
  </section>

  <section
    class="tab-content edit-room-tab-content"
    id="editRoomTagsSection"
    style="display: none"
  >
    <h3>Tags</h3>
    <ul>
      <li>
        <label for="isDark">Dark</label>
        <input type="checkbox" id="isDark" name="isDark" value="isDark" />
      </li>
      <li>
        <label for="isIndoors">Indoors</label>
        <input
          type="checkbox"
          id="isIndoors"
          name="isIndoors"
          value="isIndoors"
        />
      </li>
      <li>
        <label for="isOnWater">On Water</label>
        <input
          type="checkbox"
          id="isOnWater"
          name="isOnWater"
          value="isOnWater"
        />
      </li>
      <li>
        <label for="isUnderwater">Underwater</label>
        <input
          type="checkbox"
          id="isUnderwater"
          name="isUnderwater"
          value="isUnderwater"
        />
      </li>
      <li>
        <label for="noMounts">No Mounts</label>
        <input type="checkbox" id="noMounts" name="noMounts" value="noMounts" />
      </li>
      <li>
        <label for="noMobs">No Mobs</label>
        <input type="checkbox" id="noMobs" name="noMobs" value="noMobs" />
      </li>
      <li>
        <label for="noMagic">No Magic</label>
        <input type="checkbox" id="noMagic" name="noMagic" value="noMagic" />
      </li>
      <li>
        <label for="noCombat">No Combat</label>
        <input type="checkbox" id="noCombat" name="noCombat" value="noCombat" />
      </li>
      <li>
        <label for="playerCap">Player Cap</label>
        <input
          style="width: 3.9rem"
          type="number"
          id="playerCap"
          name="playerCap"
          min="0"
          max="18"
          value="0"
          required
        />
      </li>
      <li>
        <label for="mobCap">Mob Cap</label>
        <input
          style="width: 3.9rem"
          type="number"
          id="mobCap"
          name="mobCap"
          min="0"
          max="18"
          value="0"
          required
        />
      </li>
    </ul>
  </section>

  <section
    class="tab-content edit-room-tab-content"
    id="editRoomExitsSection"
    style="display: none"
  >
    <h3>Exits</h3>
    <ul id="editRoomExitList">
      <!-- loaded via script -->
    </ul>
  </section>

  <section
    class="tab-content edit-room-tab-content"
    id="editRoomMobNodesSection"
    style="display: none"
  >
    <h3>Mob Nodes</h3>
    <ul class="nodeList" id="editRoomMobNodeList">
      <!-- loaded via script -->
    </ul>
    <ul class="addNodeContainer">
      <li>
        <!-- mob select and add button -->
        <select
          id="editRoomMobNodeSelect"
          name="editRoomMobNodeSelect"
          required
        >
          <!-- populated by script -->
        </select>
        <button type="button" class="addNode" id="editRoomMobNodeAdd">
          add
        </button>
      </li>
    </ul>
  </section>

  <section
    class="tab-content edit-room-tab-content"
    id="editRoomItemNodesSection"
    style="display: none"
  >
    <h3>Item Nodes</h3>
    <ul class="nodeList" id="editRoomItemNodeList">
      <!-- loaded via script -->
    </ul>
    <ul class="addNodeContainer">
      <li>
        <!-- item select and add button -->
        <select
          id="editRoomItemNodeSelect"
          name="editRoomItemNodeSelect"
          required
        >
          <!-- populated by script -->
        </select>
        <button type="button" class="addNode" id="editRoomItemNodeAdd">
          add
        </button>
      </li>
    </ul>
  </section>
  <section>
    <ul>
      <li>
        <button class="submitButton noLeftMargin" type="submit">
          Update Room
        </button>
      </li>
    </ul>
  </section>
</form>

<!-- **************************************************************************
****************************SCRIPT*********************************************
**************************************************************************** -->

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const editRoomForm = document.getElementById("editRoomForm");

    // Tab menu
    const editRoomTabLinks = document.querySelectorAll(".edit-room-tab-link");
    const editRoomTabContents = document.querySelectorAll(
      ".edit-room-tab-content"
    );

    const editRoomItemNodeList = document.getElementById(
      "editRoomItemNodeList"
    );
    const editRoomItemNodeSelect = document.getElementById(
      "editRoomItemNodeSelect"
    );
    const editRoomMobNodeList = document.getElementById("editRoomMobNodeList");
    const editRoomMobNodeSelect = document.getElementById(
      "editRoomMobNodeSelect"
    );
    const editRoomExitList = document.getElementById("editRoomExitList");

    // to hold data from server on "edit room" command
    let workingEditRoomData;
    let mobBlueprints;
    let itemBlueprints;
    let rooms;

    // Tab menu listeners
    editRoomTabLinks.forEach((link) => {
      link.addEventListener("click", function () {
        // Remove active class from all tab links and sections
        editRoomTabLinks.forEach((link) => link.classList.remove("active"));
        editRoomTabContents.forEach((section) =>
          section.classList.remove("active")
        );
        editRoomTabContents.forEach(
          (section) => (section.style.display = "none")
        );

        // Add active class to the clicked tab and corresponding section
        this.classList.add("active");
        const target = document.getElementById(this.getAttribute("data-tab"));
        target.classList.add("active");
        target.style.display = "block";
      });
    });

    editRoomForm.addEventListener("submit", (e) => {
      e.preventDefault();
      workingEditRoomData.name = document.getElementById("roomName").value;
      workingEditRoomData.description.examine =
        document.getElementById("examineRoom").value;
      workingEditRoomData.description.study =
        document.getElementById("studyRoom").value;
      workingEditRoomData.description.research =
        document.getElementById("researchRoom").value;
      workingEditRoomData.isDark = document.getElementById("isDark").checked;
      workingEditRoomData.isIndoors =
        document.getElementById("isIndoors").checked;
      workingEditRoomData.isOnWater =
        document.getElementById("isOnWater").checked;
      workingEditRoomData.isUnderwater =
        document.getElementById("isUnderwater").checked;
      workingEditRoomData.noMounts =
        document.getElementById("noMounts").checked;
      workingEditRoomData.noMobs = document.getElementById("noMobs").checked;
      workingEditRoomData.noMagic = document.getElementById("noMagic").checked;
      workingEditRoomData.noCombat =
        document.getElementById("noCombat").checked;
      workingEditRoomData.playerCap = Number(
        document.getElementById("playerCap").value
      );
      workingEditRoomData.mobCap = Number(
        document.getElementById("mobCap").value
      );
      saveExitList(workingEditRoomData.exits);

      socket.emit("userSubmittedRoomEdit", workingEditRoomData);
      editRoomForm.style.display = "none"; // Hide the form after submission
    });

    document
      .getElementById("cancelEditRoomForm")
      .addEventListener("click", () => {
        editRoomForm.style.display = "none";
      });

    document
      .getElementById("editRoomItemNodeAdd")
      .addEventListener("click", () => {
        //push new node to data
        workingEditRoomData.itemNodes.push({
          _id: Math.floor(Math.random() * 1000000000), // server will generate legit id on zone save
          loadsBlueprintId: editRoomItemNodeSelect.value,
        });
        //reload nodeList
        clearUl(editRoomItemNodeList);
        loadNodesToUlElement(
          editRoomItemNodeList,
          workingEditRoomData.itemNodes,
          itemBlueprints
        );
      });
    document
      .getElementById("editRoomMobNodeAdd")
      .addEventListener("click", () => {
        //push new node to data
        workingEditRoomData.mobNodes.push({
          _id: Math.floor(Math.random() * 1000000000), // server will generate legit id on zone save
          loadsBlueprintId: editRoomMobNodeSelect.value,
        });
        //reload nodeList
        clearUl(editRoomMobNodeList);
        loadNodesToUlElement(
          editRoomMobNodeList,
          workingEditRoomData.mobNodes,
          mobBlueprints
        );
      });

    socket.on("openEditRoomForm", (formData) => {
      // persist the data from server
      workingEditRoomData = formData.roomData;
      mobBlueprints = formData.zoneData.mobBlueprintNames;
      itemBlueprints = formData.zoneData.itemBlueprintNames;
      rooms = formData.zoneData.rooms;
      // prepare fresh editRoomForm
      editRoomForm.reset();
      clearUl(editRoomMobNodeList);
      clearUl(editRoomItemNodeList);
      generateStringSelectOptions(
        mobBlueprints,
        editRoomMobNodeSelect
      );
      generateStringSelectOptions(
        itemBlueprints,
        editRoomItemNodeSelect
      );

      // reset/hide open forms, show editRoomForm
      activeForm.reset();
      activeForm.style.display = "none";
      activeForm = editRoomForm;
      activeForm.style.display = "block";
      document.querySelector("#editRoomFirstTabLink").click();
      input.value = "";

      // preset the values of the fields with data from server
      document.getElementById("roomId").textContent =
        `Id: ${workingEditRoomData._id}` || "error: room id not found";
      document.getElementById("roomName").value =
        workingEditRoomData.name || "";
      document.getElementById("examineRoom").value =
        workingEditRoomData.description.examine || "";
      document.getElementById("studyRoom").value =
        workingEditRoomData.description.study || "";
      document.getElementById("researchRoom").value =
        workingEditRoomData.description.research || "";
      document.getElementById("isDark").checked =
        workingEditRoomData.isDark || false;
      document.getElementById("isIndoors").checked =
        workingEditRoomData.isIndoors || false;
      document.getElementById("isOnWater").checked =
        workingEditRoomData.isOnWater || false;
      document.getElementById("isUnderwater").checked =
        workingEditRoomData.isUnderwater || false;
      document.getElementById("noMounts").checked =
        workingEditRoomData.noMounts || false;
      document.getElementById("noMobs").checked =
        workingEditRoomData.noMobs || false;
      document.getElementById("noMagic").checked =
        workingEditRoomData.noMagic || false;
      document.getElementById("noCombat").checked =
        workingEditRoomData.noCombat || false;
      document.getElementById("playerCap").value =
        workingEditRoomData.playerCap || 0;
      document.getElementById("mobCap").value = workingEditRoomData.mobCap || 0;
      loadNodesToUlElement(editRoomMobNodeList, workingEditRoomData.mobNodes, mobBlueprints);
      loadNodesToUlElement(editRoomItemNodeList, workingEditRoomData.itemNodes, itemBlueprints);
      loadExitList(workingEditRoomData.exits);
    });

    function loadExitList(exitList) {
      clearUl(editRoomExitList); // Clear the current list

      const directions = ["north", "east", "south", "west", "up", "down"];

      directions.forEach((direction) => {
        if (exitList[direction]) {
          const exitData = exitList[direction];
          const liElement = document.createElement("li");

          // Display the direction and destination room name
          const destinationRoom = rooms.find(
            (room) => room.id === exitData.destinationLocation.inRoom
          );

          liElement.innerHTML = `
            <div class="exit" style="margin:0;">
              ${direction}: ${
            destinationRoom ? destinationRoom.value : "Unknown Room"
          }
            </div>
            <div class="editExitControls">
              <div style="display: inline-block; margin: 0; vertical-align: top;">
                <label for="${direction}KeyItemBlueprint">Key:</label>
                <select class="stubbySelect" id="${direction}KeyItemBlueprint">
                  ${generateExitKeyOptions(
                    itemBlueprints,
                    exitData.keyItemBlueprint
                  )}
                </select>
              </div>
              <div style="display: inline-block; margin: 0; vertical-align: top;">
                <div class="right-aligned-stacked">
                  <label for="${direction}IsHidden">Hidden:</label>
                  <input type="checkbox" id="${direction}IsHidden" ${
            exitData.isHidden ? "checked" : ""
          } />
                </div>
                <div class="right-aligned-stacked">
                  <label for="${direction}IsClosed">Closed:</label>
                  <input type="checkbox" id="${direction}IsClosed" ${
            exitData.isClosed ? "checked" : ""
          } />
                </div>
              </div>
            </div>
          `;

          editRoomExitList.appendChild(liElement);
        }
      });
    }

    function saveExitList(exitList) {
      const directions = ["north", "east", "south", "west", "up", "down"];
      directions.forEach((direction) => {
        if (exitList[direction]) {
          const exitData = exitList[direction];
          let chosenKeyBlueprint = document.getElementById(
            `${direction}KeyItemBlueprint`
          ).value;
          if (!chosenKeyBlueprint) {
            chosenKeyBlueprint = null;
          }
          exitData.keyItemBlueprint = chosenKeyBlueprint;
          exitData.isHidden = document.getElementById(
            `${direction}IsHidden`
          ).checked;
          exitData.isClosed = document.getElementById(
            `${direction}IsClosed`
          ).checked;
        }
      });
    }

    function generateExitKeyOptions(availableItems, selectedItem) {
      let options = `<option value="">(unlocked)</option>`; // Default option

      availableItems.forEach((item) => {
        options += `<option value="${item.id}" ${
          item.id === selectedItem ? "selected" : ""
        }>${item.value}</option>`;
      });

      return options;
    }
  });
</script>
