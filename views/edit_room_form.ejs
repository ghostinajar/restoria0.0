<!-- Edit room form -->
<form
  id="editRoomForm"
  class="sideForm"
  style="display: none"
  autocomplete="off"
>
  <h2>Edit Room <span id="roomId">Error: Room Id should be here</span></h2>

  <section id="editRoomDescriptionSection" style="display: block">
    <h3>Description</h3>
    <ul>
      <li>
        <label for="roomName">Name</label>
        <input
          id="roomName"
          name="roomName"
          type="text"
          maxlength="60"
          required
        />
      </li>
      <li>
        <label for="examineRoom">Examine</label>
        <textarea
          id="examineRoom"
          name="examineRoom"
          maxlength="240"
        ></textarea>
      </li>
      <li>
        <label for="studyRoom">Study</label>
        <textarea id="studyRoom" name="studyRoom" maxlength="640"></textarea>
      </li>
      <li>
        <label for="researchRoom">Research</label>
        <textarea
          id="researchRoom"
          name="researchRoom"
          maxlength="1600"
        ></textarea>
      </li>
      <li>
        <button type="button" data-target="editRoomTagsSection">Tags →</button>
      </li>
    </ul>
  </section>

  <section id="editRoomTagsSection" style="display: none">
    <h3>Tags</h3>
    <ul>
      <li>
        <label for="isDark">Dark</label>
        <input type="checkbox" id="isDark" name="isDark" value="isDark" />
      </li>
      <li>
        <label for="isIndoors">Indoors</label>
        <input
          type="checkbox"
          id="isIndoors"
          name="isIndoors"
          value="isIndoors"
        />
      </li>
      <li>
        <label for="isOnWater">On Water</label>
        <input
          type="checkbox"
          id="isOnWater"
          name="isOnWater"
          value="isOnWater"
        />
      </li>
      <li>
        <label for="isUnderwater">Underwater</label>
        <input
          type="checkbox"
          id="isUnderwater"
          name="isUnderwater"
          value="isUnderwater"
        />
      </li>
      <li>
        <label for="noMounts">No Mounts</label>
        <input type="checkbox" id="noMounts" name="noMounts" value="noMounts" />
      </li>
      <li>
        <label for="noMobs">No Mobs</label>
        <input type="checkbox" id="noMobs" name="noMobs" value="noMobs" />
      </li>
      <li>
        <label for="noMagic">No Magic</label>
        <input type="checkbox" id="noMagic" name="noMagic" value="noMagic" />
      </li>
      <li>
        <label for="noCombat">No Combat</label>
        <input type="checkbox" id="noCombat" name="noCombat" value="noCombat" />
      </li>
      <li>
        <label for="playerCap">Player Cap</label>
        <select id="playerCap" name="editPlayerCap" type="number" required>
          <!-- populated by script -->
        </select>
      </li>
      <li>
        <label for="mobCap">Mob Cap</label>
        <select id="mobCap" name="editMobCap" type="number" required>
          <!-- populated by script -->
        </select>
      </li>
      <li>
        <button type="button" data-target="editRoomMobNodesSection">
          MobNodes →
        </button>
      </li>
      <li>
        <a data-target="editRoomDescriptionSection" class="secondaryAction">
          ← Description
        </a>
      </li>
    </ul>
  </section>

  <section id="editRoomMobNodesSection" style="display: none">
    <h3>Mob Nodes</h3>
    <ul class="nodeList" id="editRoomMobNodeList">
      <!-- loaded via script -->
    </ul>
    <ul>
      <li>
        <button type="button" data-target="editRoomItemNodesSection">
          ItemNodes →
        </button>
      </li>
      <li>
        <a data-target="editRoomTagsSection" class="secondaryAction">
          ← Tags
        </a>
      </li>
    </ul>
  </section>

  <section id="editRoomItemNodesSection" style="display: none">
    <h3>Item Nodes</h3>
    <ul class="nodeList" id="editRoomItemNodeList">
      <!-- loaded via script -->
    </ul>
    <ul>
      <li>
        <button type="button" data-target="editRoomExitsSection">
          Exits →
        </button>
      </li>
      <li>
        <a data-target="editRoomMobNodesSection" class="secondaryAction">
          ← MobNodes
        </a>
      </li>
    </ul>
  </section>

  <section id="editRoomExitsSection" style="display: none">
    <h3>Exits</h3>
    <ul id="editRoomExitList">
      <!-- loaded via script -->
    </ul>
    <ul>
      <li>
        <button class="submitButton" type="submit">Update Room</button>
      </li>
      <li>
        <a data-target="editRoomItemNodesSection" class="secondaryAction">
          ← ItemNodes
        </a>
      </li>
    </ul>
  </section>

  <ul>
    <li>
      <a id="cancelEditRoomForm" class="secondaryAction"> Cancel </a>
    </li>
  </ul>
</form>

<!-- **************************************************************************
****************************************************************************
**************************************************************************** -->

<script>
  document.addEventListener("DOMContentLoaded", () => {
    let currentEditRoom;
    const editRoomForm = document.getElementById("editRoomForm");
    const editRoomItemNodeList = document.getElementById(
      "editRoomItemNodeList"
    );
    const editRoomMobNodeList = document.getElementById("editRoomMobNodeList");
    const editRoomExitList = document.getElementById("editRoomExitList");
    const sectionsForEditRoom = {
      editRoomDescriptionSection: document.getElementById(
        "editRoomDescriptionSection"
      ),
      editRoomTagsSection: document.getElementById("editRoomTagsSection"),
      editRoomMobNodesSection: document.getElementById(
        "editRoomMobNodesSection"
      ),
      editRoomItemNodesSection: document.getElementById(
        "editRoomItemNodesSection"
      ),
      editRoomExitsSection: document.getElementById("editRoomExitsSection"),
    };
    let activeFormSectionForEditRoom =
      sectionsForEditRoom.editRoomDescriptionSection;

    generateNumberSelectOptions(0, 9, document.getElementById("playerCap"));
    generateNumberSelectOptions(0, 9, document.getElementById("mobCap"));

    editRoomForm.addEventListener("submit", (e) => {
      e.preventDefault();
      currentEditRoom.name = document.getElementById("roomName").value;
      currentEditRoom.description.examine =
        document.getElementById("examineRoom").value;
      currentEditRoom.description.study =
        document.getElementById("studyRoom").value;
      currentEditRoom.description.research =
        document.getElementById("researchRoom").value;
      currentEditRoom.isDark = document.getElementById("isDark").checked;
      currentEditRoom.isIndoors = document.getElementById("isIndoors").checked;
      currentEditRoom.isOnWater = document.getElementById("isOnWater").checked;
      currentEditRoom.isUnderwater =
        document.getElementById("isUnderwater").checked;
      currentEditRoom.noMounts = document.getElementById("noMounts").checked;
      currentEditRoom.noMobs = document.getElementById("noMobs").checked;
      currentEditRoom.noMagic = document.getElementById("noMagic").checked;
      currentEditRoom.noCombat = document.getElementById("noCombat").checked;
      currentEditRoom.playerCap = Number(
        document.getElementById("playerCap").value
      );
      currentEditRoom.mobCap = Number(document.getElementById("mobCap").value);
      socket.emit("userSubmittedRoomEdit", currentEditRoom);
      editRoomForm.style.display = "none"; // Hide the form after submission
    });

    editRoomForm.addEventListener("click", (e) => {
      if (e.target.matches("[data-target]")) {
        hideEditRoomFormSections();
        activeFormSectionForEditRoom =
          sectionsForEditRoom[e.target.dataset.target];
        activeFormSectionForEditRoom.style.display = "block";
      }
    });

    document
      .getElementById("cancelEditRoomForm")
      .addEventListener("click", () => {
        editRoomForm.style.display = "none";
      });

    socket.on("openEditRoomForm", (formData) => {
      // persist the requested room data
      currentEditRoom = formData.roomData;

      // reset/hide open forms, show editRoomForm
      resetEditRoomForm();
      activeForm.reset();
      activeForm.style.display = "none";
      activeForm = editRoomForm;
      activeForm.style.display = "block";
      input.value = "";

      // preset the values of the fields from requested room data
      document.getElementById("roomId").textContent =
        `Id: ${currentEditRoom._id}` || "error: room id not found";
      document.getElementById("roomName").value = currentEditRoom.name || "";
      document.getElementById("examineRoom").value =
        currentEditRoom.description.examine || "";
      document.getElementById("studyRoom").value =
        currentEditRoom.description.study || "";
      document.getElementById("researchRoom").value =
        currentEditRoom.description.research || "";
      document.getElementById("isDark").checked =
        currentEditRoom.isDark || false;
      document.getElementById("isIndoors").checked =
        currentEditRoom.isIndoors || false;
      document.getElementById("isOnWater").checked =
        currentEditRoom.isOnWater || false;
      document.getElementById("isUnderwater").checked =
        currentEditRoom.isUnderwater || false;
      document.getElementById("noMounts").checked =
        currentEditRoom.noMounts || false;
      document.getElementById("noMobs").checked =
        currentEditRoom.noMobs || false;
      document.getElementById("noMagic").checked =
        currentEditRoom.noMagic || false;
      document.getElementById("noCombat").checked =
        currentEditRoom.noCombat || false;
      document.getElementById("playerCap").value =
        currentEditRoom.playerCap || 0;
      document.getElementById("mobCap").value = currentEditRoom.mobCap || 0;
      loadNodeList(currentEditRoom.mobNodes, editRoomMobNodeList);
      loadNodeList(currentEditRoom.itemNodes, editRoomItemNodeList);
    });

    function clearUl(ul) {
      while (ul.firstChild) {
        ul.removeChild(ul.firstChild);
      }
    }

    function hideEditRoomFormSections() {
      sectionsForEditRoom.editRoomDescriptionSection.style.display = "none";
      sectionsForEditRoom.editRoomTagsSection.style.display = "none";
      sectionsForEditRoom.editRoomMobNodesSection.style.display = "none";
      sectionsForEditRoom.editRoomItemNodesSection.style.display = "none";
      sectionsForEditRoom.editRoomExitsSection.style.display = "none";
    }

    function loadNodeList(nodeList, ulElement) {
      for (let node of nodeList) {
        thisNode = node;
        addNodeToList(ulElement, node);
      }
    }

    function resetEditRoomForm() {
      editRoomForm.reset();
      clearUl(editRoomMobNodeList);
      clearUl(editRoomItemNodeList);
      hideEditRoomFormSections();
      activeFormSectionForEditRoom =
        sectionsForEditRoom.editRoomDescriptionSection;
      sectionsForEditRoom.editRoomDescriptionSection.style.display = "block";
    }

    function addNodeToList(ulElement, node) {
      // Create a new <li> element
      const liElement = document.createElement("li");
      liElement.className = "node";
      // Set the contents of the <li> to show node.value and node.id
      liElement.innerHTML = `<div class="nodeInfo"><span class="nodeName">${node.value}</span><span class="nodeId">id: ${node.id}</span></div>`;

      // Create a delete button
      const deleteButton = document.createElement("button");
      deleteButton.textContent = "remove";
      deleteButton.className = "deleteNode";
      deleteButton.onclick = function () {
        ulElement.removeChild(liElement);
        deleteNodeById(node.id);
      };

      // Append the delete button to the <li>
      liElement.appendChild(deleteButton);

      // Append the <li> to the <ul>
      ulElement.appendChild(liElement);
    }

    function deleteNodeById(id) {
      let index;
      //check for index in mobNodes
      index = roomData.mobNodes.findIndex((node) => node.id === id);
      if (index) {
        //it's a mob
        if (index !== -1) {
          //delete the mobNode
          roomData.mobNodes.splice(index, 1);
        }
        clearUl(editRoomMobNodeList);
        loadNodeList(roomData.mobNodes, editRoomMobNodeList);
      } else {
        //it's an item
        index = roomData.itemNodes.findIndex((node) => node.id === id);
        if (!index) {
          console.log(`deleteNodeById failed: index of node not found`);
          return;
        }
        //delete the itemNode
        if (index !== -1) {
          roomData.itemNodes.splice(index, 1);
        }
        clearUl(editRoomItemNodeList);
        loadNodeList(roomData.itemNodes, editRoomItemNodeList);
      }
    }
  });
</script>
