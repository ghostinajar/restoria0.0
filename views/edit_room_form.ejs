<!-- Edit room form -->
<form
  id="editRoomForm"
  class="sideForm"
  style="display: none"
  autocomplete="off"
>
  <ul>
    <li>
      <a class="cancelButton" id="cancelEditRoomForm"> Cancel </a>
    </li>
  </ul>
  <h2>
    Edit Room
    <span class="nodeId" id="roomId">Error: Room Id should be here</span>
  </h2>
  <div class="tabs">
    <button
      id="editRoomDescriptionTab"
      type="button"
      class="tab-link edit-room-tab-link active"
      data-tab="editRoomDescriptionSection"
    >
      Description
    </button>
    <button
      id="editRoomTagsTab"
      type="button"
      class="tab-link edit-room-tab-link"
      data-tab="editRoomTagsSection"
    >
      Tags
    </button>
    <button
      id="editRoomExitsTab"
      type="button"
      class="tab-link edit-room-tab-link"
      data-tab="editRoomExitsSection"
    >
      Exits
    </button>
    <button
      id="editRoomMobNodesTab"
      type="button"
      class="tab-link edit-room-tab-link"
      data-tab="editRoomMobNodesSection"
    >
      MobNodes
    </button>
    <button
      id="editRoomItemNodesTab"
      type="button"
      class="tab-link edit-room-tab-link"
      data-tab="editRoomItemNodesSection"
    >
      ItemNodes
    </button>
  </div>
  <section
    class="tab-content edit-room-tab-content"
    id="editRoomDescriptionSection"
    style="display: block"
  >
    <h3>Description</h3>
    <ul>
      <li>
        <label for="editRoomName">Name</label>
        <input
          id="editRoomName"
          name="editRoomName"
          type="text"
          maxlength="60"
          required
        />
      </li>
      <li>
        <label for="editRoomExamine">Examine</label>
        <textarea
          id="editRoomExamine"
          name="editRoomExamine"
          maxlength="240"
        ></textarea>
      </li>
      <li>
        <label for="editRoomStudy">Study</label>
        <textarea
          id="editRoomStudy"
          name="editRoomStudy"
          maxlength="640"
        ></textarea>
      </li>
      <li>
        <label for="editRoomResearch">Research</label>
        <textarea
          id="editRoomResearch"
          name="editRoomResearch"
          maxlength="1600"
        ></textarea>
      </li>
    </ul>
  </section>

  <section
    class="tab-content edit-room-tab-content"
    id="editRoomTagsSection"
    style="display: none"
  >
    <h3>Tags</h3>
    <ul>
      <li>
        <label for="editRoomIsDark">Dark</label>
        <input
          type="checkbox"
          id="editRoomIsDark"
          name="editRoomIsDark"
          value="editRoomIsDark"
        />
      </li>
      <li>
        <label for="editRoomIsIndoors">Indoors</label>
        <input
          type="checkbox"
          id="editRoomIsIndoors"
          name="editRoomIsIndoors"
          value="editRoomIsIndoors"
        />
      </li>
      <li>
        <label for="editRoomIsOnWater">On Water</label>
        <input
          type="checkbox"
          id="editRoomIsOnWater"
          name="editRoomIsOnWater"
          value="editRoomIsOnWater"
        />
      </li>
      <li>
        <label for="editRoomIsUnderwater">Underwater</label>
        <input
          type="checkbox"
          id="editRoomIsUnderwater"
          name="editRoomIsUnderwater"
          value="editRoomIsUnderwater"
        />
      </li>
      <li>
        <label for="editRoomNoMounts">No Mounts</label>
        <input
          type="checkbox"
          id="editRoomNoMounts"
          name="editRoomNoMounts"
          value="editRoomNoMounts"
        />
      </li>
      <li>
        <label for="editRoomNoMobs">No Mobs</label>
        <input
          type="checkbox"
          id="editRoomNoMobs"
          name="editRoomNoMobs"
          value="editRoomNoMobs"
        />
      </li>
      <li>
        <label for="editRoomNoMagic">No Magic</label>
        <input
          type="checkbox"
          id="editRoomNoMagic"
          name="editRoomNoMagic"
          value="editRoomNoMagic"
        />
      </li>
      <li>
        <label for="editRoomNoCombat">No Combat</label>
        <input
          type="checkbox"
          id="editRoomNoCombat"
          name="editRoomNoCombat"
          value="editRoomNoCombat"
        />
      </li>
      <li>
        <label for="editRoomPlayerCap">Player Cap</label>
        <input
          style="width: 3.9rem"
          type="number"
          id="editRoomPlayerCap"
          name="editRoomPlayerCap"
          min="0"
          max="18"
          value="0"
          required
        />
      </li>
      <li>
        <label for="editRoomMobCap">Mob Cap</label>
        <input
          style="width: 3.9rem"
          type="number"
          id="editRoomMobCap"
          name="editRoomMobCap"
          min="0"
          max="18"
          value="0"
          required
        />
      </li>
    </ul>
  </section>

  <section
    class="tab-content edit-room-tab-content"
    id="editRoomExitsSection"
    style="display: none"
  >
    <h3>Exits</h3>
    <ul id="editRoomExitList">
      <!-- loaded via script -->
    </ul>
  </section>

  <section
    class="tab-content edit-room-tab-content"
    id="editRoomMobNodesSection"
    style="display: none"
  >
    <h3>Mob Nodes</h3>
    <ul class="nodeList" id="editRoomMobNodeList">
      <!-- loaded via script -->
    </ul>
    <ul class="addNodeContainer">
      <li>
        <!-- mob select and add button -->
        <select
          id="editRoomMobNodeSelect"
          name="editRoomMobNodeSelect"
          required
        >
          <!-- populated by script -->
        </select>
        <button type="button" class="addNode" id="editRoomMobNodeAdd">
          add
        </button>
      </li>
    </ul>
  </section>

  <section
    class="tab-content edit-room-tab-content"
    id="editRoomItemNodesSection"
    style="display: none"
  >
    <h3>Item Nodes</h3>
    <ul class="nodeList" id="editRoomItemNodeList">
      <!-- loaded via script -->
    </ul>
    <ul class="addNodeContainer">
      <li>
        <!-- item select and add button -->
        <select
          id="editRoomItemNodeSelect"
          name="editRoomItemNodeSelect"
          required
        >
          <!-- populated by script -->
        </select>
        <button type="button" class="addNode" id="editRoomItemNodeAdd">
          add
        </button>
      </li>
    </ul>
  </section>
  <section>
    <ul>
      <li>
        <button class="submitButton noLeftMargin" type="submit">
          Update Room
        </button>
      </li>
    </ul>
  </section>
</form>

<!-- **************************************************************************
****************************SCRIPT*********************************************
**************************************************************************** -->

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const editRoomForm = document.getElementById("editRoomForm");

    // Tab menu
    const editRoomTabLinks = document.querySelectorAll(".edit-room-tab-link");
    const editRoomTabContents = document.querySelectorAll(
      ".edit-room-tab-content"
    );
    const editRoomDescriptionTab = document.getElementById(
      "editRoomDescriptionTab"
    );
    const editRoomTagsTab = document.getElementById("editRoomTagsTab");
    const editRoomExitsTab = document.getElementById("editRoomExitsTab");
    const editRoomMobNodesTab = document.getElementById("editRoomMobNodesTab");
    const editRoomItemNodesTab = document.getElementById(
      "editRoomItemNodesTab"
    );

    const editRoomName = document.getElementById("editRoomName").value;
    const editRoomExamine = document.getElementById("editRoomExamine").value;
    const editRoomStudy = document.getElementById("editRoomStudy").value;
    const editRoomResearch = document.getElementById("editRoomResearch").value;
    const editRoomIsDark = document.getElementById("editRoomIsDark").value;
    const editRoomIsIndoors =
      document.getElementById("editRoomIsIndoors").value;
    const editRoomIsOnWater =
      document.getElementById("editRoomIsOnWater").value;
    const editRoomIsUnderwater = document.getElementById(
      "editRoomIsUnderwater"
    ).value;
    const editRoomNoMounts = document.getElementById("editRoomNoMounts").value;
    const editRoomNoMobs = document.getElementById("editRoomNoMobs").value;
    const editRoomNoMagic = document.getElementById("editRoomNoMagic").value;
    const editRoomNoCombat = document.getElementById("editRoomNoCombat").value;
    const editRoomPlayerCap =
      document.getElementById("editRoomPlayerCap").value;
    const editRoomMobCap = document.getElementById("editRoomMobCap").value;
    const editRoomItemNodeList = document.getElementById(
      "editRoomItemNodeList"
    );
    const editRoomItemNodeSelect = document.getElementById(
      "editRoomItemNodeSelect"
    );
    const editRoomMobNodeList = document.getElementById("editRoomMobNodeList");
    const editRoomMobNodeSelect = document.getElementById(
      "editRoomMobNodeSelect"
    );
    const editRoomExitList = document.getElementById("editRoomExitList");

    const editRoomDescriptionHelp = [
      `============================== Item Description ==============================`,
      `<span style="color:var(--red)">Name:</span> e.g '<span style="color: var(--yellow_light)">A Long Hallway</span>' or '<span style="color: var(--yellow_light)">The Potion Shoppe'</span>`,
      `<span style="color:var(--red)">Examine:</span> The player sees this paragraph when they examine the room.`,
      `<span style="color:var(--red)">Study:</span> player learns some history when they study the room.`,
      `<span style="color:var(--red)">Research:</span> these paragraphs tell the full history of the room.`,
      `  A good research text rewards the reader with some secrets about the room.`,
    ];
    const editRoomTagsHelp = [
      `================================ Room Tags ===================================`,
      `<span style="color:var(--red)">Dark:</span> Items, mobs, and players are hidden unless a lamp is in the room.`,
      `<span style="color:var(--red)">Indoors:</span> Weather won't take effect here.`,
      `<span style="color:var(--red)">On Water:</span> Players and mobs can't enter without levitate.`,
      `<span style="color:var(--red)">Underwater:</span> Players will take drowning damage without magic.`,
      `<span style="color:var(--red)">No Mounts:</span> No one can enter this room while mounted.`,
      `<span style="color:var(--red)">No Mobs:</span> Mobs can't enter this room.`,
      `<span style="color:var(--red)">No Magic:</span> No one can cast spells in this room.`,
      `<span style="color:var(--red)">No Combat:</span> No one can enter combat in this room.`,
    ];
    const editRoomExitsHelp = [
      `================================== Exits =====================================`,
      `<span style="color:var(--red)">Key:</span> No one can unlock this door unless this item is in their inventory.`,
      `<span style="color:var(--red)">Hidden:</span> The exit is hidden unless you search.`,
      `<span style="color:var(--red)">Closed:</span> This door is closed when the zone is spawned.`,
    ];
    const editRoomItemNodesHelp = [
      `================================ Mob Nodes ===================================`,
      `An item node spawns that item into the room when the zone is spawned.`,
      `Choose an item and click <span style="color:var(--green)">add</span> to create an item node for it.`,
      `Click <span style="color:var(--red)">remove</span> next to an existing node to remove it.`,
      `These changes won't be saved until you click "Update Item".`,
    ];
    const editRoomMobNodesHelp = [
      `================================ Item Nodes ==================================`,
      `An mob node spawns that mob into the room when the zone is spawned.`,
      `Choose a mob and click <span style="color:var(--green)">add</span> to create an mob node for it.`,
      `Click <span style="color:var(--red)">remove</span> next to an existing node to remove it.`,
      `These changes won't be saved until you click "Update Room".`,
    ];

    // to hold data from server on "edit room" command
    let workingEditRoomData;
    let mobBlueprints;
    let itemBlueprints;
    let rooms;

    // Tab menu listeners
    editRoomTabLinks.forEach((link) => {
      link.addEventListener("click", function () {
        // Remove active class from all tab links and sections
        editRoomTabLinks.forEach((link) => link.classList.remove("active"));
        editRoomTabContents.forEach((section) =>
          section.classList.remove("active")
        );
        editRoomTabContents.forEach(
          (section) => (section.style.display = "none")
        );

        // Add active class to the clicked tab and corresponding section
        this.classList.add("active");
        const target = document.getElementById(this.getAttribute("data-tab"));
        target.classList.add("active");
        target.style.display = "block";
      });
    });

    editRoomDescriptionTab.addEventListener("click", () =>
      showHelpArray(editRoomDescriptionHelp)
    );
    editRoomTagsTab.addEventListener("click", () =>
      showHelpArray(editRoomTagsHelp)
    );
    editRoomExitsTab.addEventListener("click", () =>
      showHelpArray(editRoomExitsHelp)
    );
    editRoomMobNodesTab.addEventListener("click", () =>
      showHelpArray(editRoomMobNodesHelp)
    );
    editRoomItemNodesTab.addEventListener("click", () =>
      showHelpArray(editRoomItemNodesHelp)
    );

    editRoomForm.addEventListener("submit", (e) => {
      e.preventDefault();
      workingEditRoomData.name = DOMPurify.sanitize(editRoomName);
      workingEditRoomData.description.examine =
        DOMPurify.sanitize(editRoomExamine);
      workingEditRoomData.description.study = DOMPurify.sanitize(editRoomStudy);
      workingEditRoomData.description.research =
        DOMPurify.sanitize(editRoomResearch);
      workingEditRoomData.isDark = editRoomIsDark.checked;
      workingEditRoomData.IsIndoors = editRoomIsIndoors.checked;
      workingEditRoomData.IsOnWater = editRoomIsOnWater.checked;
      workingEditRoomData.IsUnderwater = editRoomIsUnderwater.checked;
      workingEditRoomData.NoMounts = editRoomNoMounts.checked;
      workingEditRoomData.NoMobs = editRoomNoMobs.checked;
      workingEditRoomData.NoMagic = editRoomNoMagic.checked;
      workingEditRoomData.NoCombat = editRoomNoCombat.checked;
      workingEditRoomData.PlayerCap = Number(editRoomPlayerCap.value);
      workingEditRoomData.MobCap = Number(editRoomMobCap.value);
      saveExitList(workingEditRoomData.exits);

      socket.emit("userSubmittedEditRoom", workingEditRoomData);
      editRoomForm.style.display = "none";
    });

    document
      .getElementById("cancelEditRoomForm")
      .addEventListener("click", () => {
        editRoomForm.style.display = "none";
      });

    document
      .getElementById("editRoomItemNodeAdd")
      .addEventListener("click", () => {
        //push new node to data
        workingEditRoomData.itemNodes.push({
          _id: Math.floor(Math.random() * 1000000000), // server will generate legit id on zone save
          loadsBlueprintId: editRoomItemNodeSelect.value,
        });
        //reload nodeList
        clearUl(editRoomItemNodeList);
        loadNodesToUlElement(
          editRoomItemNodeList,
          workingEditRoomData.itemNodes,
          itemBlueprints
        );
      });
    document
      .getElementById("editRoomMobNodeAdd")
      .addEventListener("click", () => {
        //push new node to data
        workingEditRoomData.mobNodes.push({
          _id: Math.floor(Math.random() * 1000000000), // server will generate legit id on zone save
          loadsBlueprintId: editRoomMobNodeSelect.value,
        });
        //reload nodeList
        clearUl(editRoomMobNodeList);
        loadNodesToUlElement(
          editRoomMobNodeList,
          workingEditRoomData.mobNodes,
          mobBlueprints
        );
      });

    socket.on("openEditRoomForm", (formData) => {
      // persist the data from server
      workingEditRoomData = formData.roomData;
      mobBlueprints = formData.zoneData.mobBlueprintNames;
      itemBlueprints = formData.zoneData.itemBlueprintNames;
      rooms = formData.zoneData.rooms;
      // prepare fresh editRoomForm
      editRoomForm.reset();
      clearUl(editRoomMobNodeList);
      clearUl(editRoomItemNodeList);
      generateStringSelectOptions(mobBlueprints, editRoomMobNodeSelect);
      generateStringSelectOptions(itemBlueprints, editRoomItemNodeSelect);

      // reset/hide open forms, show editRoomForm
      activeForm.reset();
      activeForm.style.display = "none";
      activeForm = editRoomForm;
      activeForm.style.display = "block";
      document.querySelector("#editRoomDescriptionTab").click();
      input.value = "";

      // preset the values of the fields with data from server
      document.getElementById("roomId").textContent =
        `Id: ${workingEditRoomData._id}` || "error: room id not found";
      editRoomName.value = workingEditRoomData.name || "";
      editRoomExamine.value = workingEditRoomData.description.examine || "";
      editRoomStudy.value = workingEditRoomData.description.study || "";
      editRoomResearch.value = workingEditRoomData.description.research || "";
      editRoomIsDark.checked = workingEditRoomData.isDark || false;
      editRoomIsIndoors.checked =
        workingEditRoomData.editRoomIsIndoors || false;
      editRoomIsOnWater.checked =
        workingEditRoomData.editRoomIsOnWater || false;
      editRoomIsUnderwater.checked =
        workingEditRoomData.editRoomIsUnderwater || false;
      editRoomNoMounts.checked = workingEditRoomData.editRoomNoMounts || false;
      editRoomNoMobs.checked = workingEditRoomData.editRoomNoMobs || false;
      editRoomNoMagic.checked = workingEditRoomData.editRoomNoMagic || false;
      editRoomNoCombat.checked = workingEditRoomData.editRoomNoCombat || false;
      editRoomPlayerCap.value = workingEditRoomData.editRoomPlayerCap || 0;
      editRoomMobCap.value = workingEditRoomData.editRoomMobCap || 0;
      loadNodesToUlElement(
        editRoomMobNodeList,
        workingEditRoomData.mobNodes,
        mobBlueprints
      );
      loadNodesToUlElement(
        editRoomItemNodeList,
        workingEditRoomData.itemNodes,
        itemBlueprints
      );
      loadExitList(workingEditRoomData.exits);
    });

    function loadExitList(exitList) {
      clearUl(editRoomExitList); // Clear the current list

      const directions = ["north", "east", "south", "west", "up", "down"];

      directions.forEach((direction) => {
        if (exitList[direction]) {
          const exitData = exitList[direction];
          const liElement = document.createElement("li");

          // Display the direction and destination room name
          const destinationRoom = rooms.find(
            (room) => room.id === exitData.destinationLocation.inRoom
          );

          liElement.innerHTML = `
            <div class="exit" style="margin:0;">
              ${direction}: ${
            destinationRoom ? destinationRoom.value : "Unknown Room"
          }
            </div>
            <div class="editExitControls">
              <div style="display: inline-block; margin: 0; vertical-align: top;">
                <label for="${direction}KeyItemBlueprint">Key:</label>
                <select class="stubbySelect" id="${direction}KeyItemBlueprint">
                  ${generateExitKeyOptions(
                    itemBlueprints,
                    exitData.keyItemBlueprint
                  )}
                </select>
              </div>
              <div style="display: inline-block; margin: 0; vertical-align: top;">
                <div class="right-aligned-stacked">
                  <label for="${direction}IsHidden">Hidden:</label>
                  <input type="checkbox" id="${direction}IsHidden" ${
            exitData.isHidden ? "checked" : ""
          } />
                </div>
                <div class="right-aligned-stacked">
                  <label for="${direction}IsClosed">Closed:</label>
                  <input type="checkbox" id="${direction}IsClosed" ${
            exitData.isClosed ? "checked" : ""
          } />
                </div>
              </div>
            </div>
          `;

          editRoomExitList.appendChild(liElement);
        }
      });
    }

    function saveExitList(exitList) {
      const directions = ["north", "east", "south", "west", "up", "down"];
      directions.forEach((direction) => {
        if (exitList[direction]) {
          const exitData = exitList[direction];
          let chosenKeyBlueprint = document.getElementById(
            `${direction}KeyItemBlueprint`
          ).value;
          if (!chosenKeyBlueprint) {
            chosenKeyBlueprint = null;
          }
          exitData.keyItemBlueprint = chosenKeyBlueprint;
          exitData.isHidden = document.getElementById(
            `${direction}IsHidden`
          ).checked;
          exitData.isClosed = document.getElementById(
            `${direction}IsClosed`
          ).checked;
        }
      });
    }

    function generateExitKeyOptions(availableItems, selectedItem) {
      let options = `<option value="">(unlocked)</option>`; // Default option

      availableItems.forEach((item) => {
        options += `<option value="${item.id}" ${
          item.id === selectedItem ? "selected" : ""
        }>${item.value}</option>`;
      });

      return options;
    }
  });
</script>
