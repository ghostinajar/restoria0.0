<! -- game_terminal.ejs -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <title>Restoria</title>
    <link rel="stylesheet" href="styles.css" />
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/2.3.4/purify.min.js"></script>
    <script>
      const socket = io(); // no URL needed for now; defaults to host that serves the page
    </script>
  </head>

  <body>
    <nav class="nav">
      <h1>Restoria 0.2</h1>
      <form action="/logout" method="post">
        <button id="logout" type="submit">Quit</button>
      </form>
    </nav>

    <!-- Messages and side forms -->
    <div id="main">
      <div id="messagesContainer">
        <ul id="messages" class="help">
          <li>
            New Player? To learn the basics, type HELP CHEATSHEET in the command
            box below.
          </li>
        </ul>
      </div>
      <!-- Define ejs modules array -->
      <% const partials = [ 'bug_form', 'create_item_blueprint_form',
      'create_mob_blueprint_form', 'create_zone_form',
      'edit_item_blueprint_form', 'edit_map_form', 'edit_mob_blueprint_form',
      'edit_room_form', 'edit_user_form', 'edit_zone_form',
      'erase_item_blueprint_form', 'erase_mob_blueprint_form',
      'erase_room_form', 'erase_zone_form', 'goto_form', 'map', 'suggest_form',
      'suggestions_form' ]; %>

      <!-- Include each ejs module from array -->
      <% partials.forEach(partial => { %> <%- include(partial); %> <% }); %>
    </div>

    <!-- User input command form -->
    <%- include('command_form'); %>

    <script>
      const isMobileDevice = /Mobi|Android/i.test(navigator.userAgent);
      let userPreferences = {};
      const messagesContainer = document.getElementById("messagesContainer");
      const messages = document.getElementById("messages");
      let activeSideBarElement = editUserForm;

      function resetActiveSidebarElementTo(element) {
        activeSideBarElement.style.display = "none";
        activeSideBarElement = element;
        activeSideBarElement.style.display = "block";
        input.value = "";
      }

      //socket event listeners
      socket.on("invalid", (rejectionString) => {
        appendMessageToTerminal({
          type: "rejection",
          content: "Server says invalid command.",
        });
      });

      socket.on("characterData", (characterData) => {
        // Ralu the Lvl.1 Neutral Cleric
        // STR	: 20         DB  : 20         Cleric Lvl.  : 20         Resist Cold : 100%
        // DEX	: 20         HB  : 20         Mage Lvl.    : 20         Resist Elec : 100%
        // CON	: 20         AC  : 100        Rogue Lvl.   : 31	        Resist Fire : 100%
        // INT	: 20         SS  : 20         Warrior Lvl	 : 31         Created	    : 2024
        // WIS	: 20         SPI : 1000       Training Pts : 20         Hrs. Played : 1000
        // CHA	: 20         SPD : 20         Capacity	   : 200
        // Gold Held : 999,999,999,999        Gold Stored : 999,999,999,999

        // show first line (Name, Level, Spirit, Job)
        let spiritColor = "white";
        let spiritText = "Neutral";
        if (characterData.spirit > 333) {
          spiritColor = "yellow_light";
          spiritText = "Sun";
        }
        if (characterData.spirit < -333) {
          spiritColor = "cyan";
          spiritText = "Moon";
        }
        let jobColor = "white";
        let jobText = ` ${
          characterData.job.charAt(0).toUpperCase() + characterData.job.slice(1)
        }`;
        switch (characterData.job) {
          case "cleric": {
            jobColor = "cyan_light";
            break;
          }
          case "mage": {
            jobColor = "blue";
            break;
          }
          case "rogue": {
            jobColor = "purple";
            break;
          }
          case "warrior": {
            jobColor = "red";
            break;
          }
          default:
            break;
        }
        appendMulticolorStringToTerminal([
          { color: "yellow", content: characterData.name },
          { color: "grey_light", content: ` the Lvl. ${characterData.lvl} ` },
          { color: spiritColor, content: spiritText },
          { color: jobColor, content: jobText },
        ]);

        // show second line (STR, DB, Cleric Lvl., Resist Cold)
        appendMulticolorStringToTerminal([
          { color: "yellow", content: "STR" },
          { color: "white", content: " : " },
          { color: "cyan", content: characterData.strength },
          { color: "white", content: `         ` },
          { color: "yellow", content: "DB" },
          { color: "white", content: " : " },
          {
            color: "cyan",
            content: characterData.damageBonus.toString().padEnd(5, " "),
          },
          { color: "white", content: `       ` },
          { color: "yellow", content: "Cleric Lvl." },
          { color: "white", content: "  : " },
          { color: "cyan", content: characterData.clericLvl.toString().padEnd(3, " ") },
          { color: "white", content: `         ` },
          { color: "yellow", content: "Resist Cold" },
          { color: "white", content: " : " },
          { color: "cyan", content: `${characterData.resistCold}%` },
        ]);
        
        // show third line (DEX, HB, Mage Lvl., Resist Elec)
        appendMulticolorStringToTerminal([
          { color: "yellow", content: "DEX" },
          { color: "white", content: " : " },
          { color: "cyan", content: characterData.dexterity },
          { color: "white", content: `         ` },
          { color: "yellow", content: "HB" },
          { color: "white", content: " : " },
          {
            color: "cyan",
            content: characterData.hitBonus.toString().padEnd(5, " "),
          },
          { color: "white", content: `       ` },
          { color: "yellow", content: "Mage Lvl.  " },
          { color: "white", content: "  : " },
          { color: "cyan", content: characterData.mageLvl.toString().padEnd(3, " ") },
          { color: "white", content: `         ` },
          { color: "yellow", content: "Resist Elec" },
          { color: "white", content: " : " },
          { color: "cyan", content: `${characterData.resistElec}%` },
        ]);

        // show fourth line (CON, AC, Rogue Lvl., Resist Fire)
        appendMulticolorStringToTerminal([
          { color: "yellow", content: "CON" },
          { color: "white", content: " : " },
          { color: "cyan", content: characterData.constitution },
          { color: "white", content: `         ` },
          { color: "yellow", content: "AC" },
          { color: "white", content: " : " },
          {
            color: "cyan",
            content: characterData.armorClass.toString().padEnd(5, " "),
          },
          { color: "white", content: `       ` },
          { color: "yellow", content: "Rogue Lvl." },
          { color: "white", content: "   : " },
          { color: "cyan", content: characterData.rogueLvl.toString().padEnd(3, " ") },
          { color: "white", content: `         ` },
          { color: "yellow", content: "Resist Fire" },
          { color: "white", content: " : " },
          { color: "cyan", content: `${characterData.resistFire}%` },
        ]);

        // show fifth line (INT, SS, Warrior Lvl., Created)
        appendMulticolorStringToTerminal([
          { color: "yellow", content: "INT" },
          { color: "white", content: " : " },
          { color: "cyan", content: characterData.intelligence },
          { color: "white", content: `         ` },
          { color: "yellow", content: "SS" },
          { color: "white", content: " : " },
          {
            color: "cyan",
            content: characterData.spellSave.toString().padEnd(5, " "),
          },
          { color: "white", content: `       ` },
          { color: "yellow", content: "Warrior Lvl." },
          { color: "white", content: " : " },
          { color: "cyan", content: characterData.warriorLvl.toString().padEnd(3, " ") },
          { color: "white", content: `         ` },
          { color: "yellow", content: "Created" },
          { color: "white", content: " : " },
          { color: "cyan", content: `${characterData.creationYear}` },
        ]);

        // show sixth line (WIS, SPI, Training Pts, Hrs. Played)
        appendMulticolorStringToTerminal([
          { color: "yellow", content: "WIS" },
          { color: "white", content: " : " },
          { color: "cyan", content: characterData.wisdom },
          { color: "white", content: `         ` },
          { color: "yellow", content: "SPI" },
          { color: "white", content: " : " },
          {
            color: "cyan",
            content: characterData.spirit.toString().padEnd(5, " "),
          },
          { color: "white", content: `      ` },
          { color: "yellow", content: "Training Pts" },
          { color: "white", content: " : " },
          { color: "cyan", content: characterData.trainingPoints.toString().padEnd(3, " ") },
          { color: "white", content: `         ` },
          { color: "yellow", content: "Hrs. Played" },
          { color: "white", content: " : " },
          { color: "cyan", content: characterData.hoursPlayed },
        ]);

        // show seventh line (CHA, SPD, Capacity)
        appendMulticolorStringToTerminal([
          { color: "yellow", content: "CHA" },
          { color: "white", content: " : " },
          { color: "cyan", content: characterData.charisma },
          { color: "white", content: `         ` },
          { color: "yellow", content: "SPD" },
          { color: "white", content: " : " },
          {
            color: "cyan",
            content: characterData.speed.toString().padEnd(5, " "),
          },
          { color: "white", content: `      ` },
          { color: "yellow", content: "Capacity" },
          { color: "white", content: " : " },
          { color: "cyan", content: characterData.capacity },
        ]);

        // show eighth line (Gold Held, Gold Stored)
        appendMulticolorStringToTerminal([
          { color: "yellow", content: "Gold Held" },
          { color: "white", content: " : " },
          { color: "cyan", content: characterData.goldHeld },
          { color: "white", content: `         ` },
          { color: "yellow", content: "Gold Stored" },
          { color: "white", content: " : " },
          { color: "cyan", content: characterData.goldStored },
        ]);

        console.log(characterData);
      });

      socket.on("equipmentArray", (equipmentArray) => {
        equipmentArray.forEach((arrayItem) => {
          let itemName =
            arrayItem[1] === "nothing"
              ? { color: "grey_dark", content: arrayItem[1] }
              : { color: "blue_light", content: arrayItem[1] };
          appendMulticolorStringToTerminal([
            { color: "yellow", content: arrayItem[0] },
            { color: "white", content: " : " },
            itemName,
          ]);
        });
      });

      socket.on("message", (message) => {
        appendMessageToTerminal(message);
      });

      socket.on("userPreference", (preference) => {
        // console.log(`received userPreference:`, preference);
        userPreferences[preference.type] = preference.setting;
        // console.log(`userPreferences:`, userPreferences);
      });

      socket.on(`userPreferences`, (preferences) => {
        userPreferences = preferences;
        // console.log("Updated userPreferences:", userPreferences);
      });

      socket.on("redirectToLogin", () => {
        socket.disconnect();
        window.location.href = "/login";
      });

      socket.on("safeMessage", (message) => {
        appendSafeMessageToTerminal(message);
      });

      socket.on("updatesArray", (updatesArray) => {
        appendSafeMessageToTerminal({
          type: "help",
          content: "Recent Updates To Restoria:",
        });
        updatesArray.forEach((update) => {
          appendMulticolorStringToTerminal([
            { color: "white", content: update.date + " " },
            { color: "green", content: update.content },
          ]);
        });
        appendSafeMessageToTerminal({
          type: "help",
          content: "Use UPDATES ALL to see the full list.",
        });
      });

      socket.on("whoArray", (whoArray) => {
        appendMulticolorStringToTerminal([
          { color: "cyan_light", content: " -" },
          { color: "yellow", content: "Lvl" },
          { color: "cyan_light", content: "-" },
          { color: "yellow", content: "Job" },
          { color: "cyan_light", content: "-----" },
          { color: "yellow", content: "Name" },
          {
            color: "cyan_light",
            content: "--------------",
          },
        ]);
        whoArray.forEach((who) => {
          let classColor = "white";
          // colorize class name
          if (who.job === "warrior") {
            classColor = "red";
          } else if (who.job === "rogue") {
            classColor = "purple";
          } else if (who.job === "mage") {
            classColor = "blue";
          }
          appendMulticolorStringToTerminal([
            { color: "cyan_light", content: "|" },
            {
              color: "yellow",
              content: who.level.toString().padEnd(4, " "),
            },
            { color: "cyan_light", content: "|" },
            {
              color: classColor,
              content: who.job.padEnd(7, " "),
            },
            { color: "cyan_light", content: "|" },
            {
              color: "yellow",
              content: who.name.padEnd(18, " "),
            },
            {
              color: "cyan_light",
              content: "|",
            },
          ]);
        });
        appendMulticolorStringToTerminal([
          {
            color: "cyan_light",
            content: " -------------------------------",
          },
        ]);
      });

      window.addEventListener("beforeunload", function (event) {
        socket.disconnect();
      });

      document
        .querySelector("#logout")
        .addEventListener("click", function (event) {
          socket.disconnect();
        });

      function generateStringSelectOptions(stringArray, select) {
        select.options.length = 0;
        for (let i = 0; i <= stringArray.length - 1; i++) {
          const option = document.createElement("option");
          // string array may be Array<{_id: string, name: string}> or Array<string>
          option.value = stringArray[i]._id
            ? stringArray[i]._id
            : stringArray[i];
          option.textContent = stringArray[i].name
            ? stringArray[i].name
            : stringArray[i];
          select.appendChild(option);
        }
      }

      function appendMessageToTerminal(message) {
        const item = document.createElement("li");
        item.classList.add("message-item");
        item.textContent = message.content;
        item.classList.add(message.type);
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
      }

      function appendSafeMessageToTerminal(message) {
        const item = document.createElement("li");
        item.classList.add("message-item");
        item.innerHTML = message.content;
        item.classList.add(message.type);
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
      }
      function appendMulticolorStringToTerminal(multicolorString) {
        const item = document.createElement("li");
        item.classList.add("message-item");
        // multicolorString is an array of objects with color and content properties
        multicolorString.forEach((part) => {
          const span = document.createElement("span");
          span.classList.add(part.color);
          span.textContent = part.content;
          item.appendChild(span);
        });
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
      }

      function loadNodesToUlElement(ulElement, nodes, blueprints) {
        for (let node of nodes) {
          addNodeToUlElement(ulElement, node, nodes, blueprints);
        }
      }

      function addNodeToUlElement(ulElement, node, nodes, blueprints) {
        // Create a new <li> element
        const liElement = document.createElement("li");
        liElement.className = "node";
        nodeName = blueprints.find(
          (blueprint) => blueprint._id === node.loadsBlueprintId
        ).name;

        liElement.innerHTML = `<div class="nodeInfo"><span class="nodeName">${nodeName}</span><span class="nodeId">id: ${node.loadsBlueprintId}</span></div>`;

        // Create a delete button
        const deleteButton = document.createElement("button");
        deleteButton.textContent = "remove";
        deleteButton.className = "deleteNode";
        deleteButton.type = "button";
        deleteButton.onclick = function () {
          ulElement.removeChild(liElement);
          deleteNodeById(node._id, nodes, ulElement, blueprints);
        };

        // Append the delete button to the <li>
        liElement.appendChild(deleteButton);

        // Append the <li> to the <ul>
        ulElement.appendChild(liElement);
      }

      function deleteNodeById(id, nodes, ulElement, blueprints) {
        let index = nodes.findIndex((node) => node._id === id);
        if (index !== -1) {
          nodes.splice(index, 1);
          clearUl(ulElement);
          loadNodesToUlElement(ulElement, nodes, blueprints);
        }
      }

      function clearUl(ul) {
        while (ul.firstChild) {
          ul.removeChild(ul.firstChild);
        }
      }

      function showHelpArray(messageArray) {
        messageArray.forEach((message) => {
          appendSafeMessageToTerminal({ type: "help", content: message });
        });
      }
    </script>
  </body>
</html>
