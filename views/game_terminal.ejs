<! -- game_terminal.ejs -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <title>Restoria</title>
    <link rel="stylesheet" href="styles.css" />
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/2.3.4/purify.min.js"></script>
    <script>
      const socket = io(); // no URL needed for now; defaults to host that serves the page
    </script>
  </head>

  <body>
    <nav class="nav">
      <h1>Restoria 0.1.0</h1>
      <form action="/logout" method="post">
        <button id="logout" type="submit">Quit</button>
      </form>
    </nav>

    <!-- Messages and side forms -->
    <div id="main">
      <div id="messagesContainer">
        <ul id="messages"></ul>
      </div>
      <%- include('bug_form'); %> <%- include('create_exit_form'); %> <%-
      include('create_item_blueprint_form'); %> <%-
      include('create_mob_blueprint_form'); %> <%- include('create_room_form');
      %> <%- include('create_zone_form'); %> <%-
      include('edit_item_blueprint_form'); %> <%-
      include('edit_mob_blueprint_form'); %> <%- include('edit_room_form'); %>
      <%- include('edit_user_form'); %> <%- include('edit_zone_form'); %> <%-
      include('erase_exit_form'); %> <%- include('erase_item_blueprint_form');
      %> <%- include('erase_mob_blueprint_form'); %> <%-
      include('erase_room_form'); %> <%- include('erase_zone_form'); %> <%-
      include('goto_form'); %> <%- include('map'); %> <%-
      include('suggest_form'); %> <%- include('suggestions_form'); %>
    </div>

    <!-- User input command form -->
    <%- include('command_form'); %>

    <script>
      let userPreferences = {};
      const messagesContainer = document.getElementById("messagesContainer");
      const messages = document.getElementById("messages");
      let activeSideBarElement = editUserForm;

      function resetActiveSidebarElementTo(element) {
        if (activeSideBarElement.tagName === "FORM") {
          activeSideBarElement.reset();
        }
        activeSideBarElement.style.display = "none";
        activeSideBarElement = element;
        activeSideBarElement.style.display = "block";
        input.value = "";
      }

      //socket event listeners
      socket.on("invalid", (rejectionString) => {
        appendMessageToTerminal({
          type: "rejection",
          content: "Server says invalid command.",
        });
      });

      socket.on("message", (message) => {
        appendMessageToTerminal(message);
      });

      socket.on("redirectToLogin", () => {
        socket.disconnect();
        window.location.href = "/login";
      });

      socket.on("safeMessage", (message) => {
        appendSafeMessageToTerminal(message);
      });

      socket.on("updatesArray", (updatesArray) => {
        appendSafeMessageToTerminal({
          type: "help",
          content: "Recent Updates To Restoria:",
        });
        updatesArray.forEach((update) => {
          appendMulticolorStringToTerminal([
            { color: "white", content: update.date + " "},
            { color: "green", content: update.content },
          ]);
        });
        appendSafeMessageToTerminal({
          type: "help",
          content: "Use UPDATES ALL to see the full list.",
        });
      });

      socket.on("whoArray", (whoArray) => {
        appendMulticolorStringToTerminal([
          { color: "cyan_light", content: " -" },
          { color: "yellow", content: "Lvl" },
          { color: "cyan_light", content: "-" },
          { color: "yellow", content: "Job" },
          { color: "cyan_light", content: "-----" },
          { color: "yellow", content: "Name" },
          {
            color: "cyan_light",
            content: "--------------",
          },
        ]);
        whoArray.forEach((who) => {
          let classColor = "white";
          // colorize class name
          if (who.job === "warrior") {
            classColor = "red";
          } else if (who.job === "rogue") {
            classColor = "purple";
          } else if (who.job === "mage") {
            classColor = "blue";
          }
          appendMulticolorStringToTerminal([
            { color: "cyan_light", content: "|" },
            {
              color: "yellow",
              content: who.level.toString().padEnd(4, " "),
            },
            { color: "cyan_light", content: "|" },
            {
              color: classColor,
              content: who.job.padEnd(7, " "),
            },
            { color: "cyan_light", content: "|" },
            {
              color: "yellow",
              content: who.name.padEnd(18, " "),
            },
            {
              color: "cyan_light",
              content: "|",
            },
          ]);
        });
        appendMulticolorStringToTerminal([
          {
            color: "cyan_light",
            content: " -------------------------------",
          },
        ]);
        console.log(whoArray);
      });

      window.addEventListener("beforeunload", function (event) {
        socket.disconnect();
      });

      document
        .querySelector("#logout")
        .addEventListener("click", function (event) {
          socket.disconnect();
        });

      function generateStringSelectOptions(stringArray, select) {
        select.options.length = 0;
        for (let i = 0; i <= stringArray.length - 1; i++) {
          const option = document.createElement("option");
          // string array may be Array<{_id: string, name: string}> or Array<string>
          option.value = stringArray[i]._id
            ? stringArray[i]._id
            : stringArray[i];
          option.textContent = stringArray[i].name
            ? stringArray[i].name
            : stringArray[i];
          select.appendChild(option);
        }
      }

      function appendMessageToTerminal(message) {
        const item = document.createElement("li");
        item.classList.add("message-item");
        item.textContent = message.content;
        item.classList.add(message.type);
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
      }

      function appendSafeMessageToTerminal(message) {
        const item = document.createElement("li");
        item.classList.add("message-item");
        item.innerHTML = message.content;
        item.classList.add(message.type);
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
      }
      function appendMulticolorStringToTerminal(multicolorString) {
        const item = document.createElement("li");
        item.classList.add("message-item");
        // multicolorString is an array of objects with color and content properties
        multicolorString.forEach((part) => {
          const span = document.createElement("span");
          span.classList.add(part.color);
          span.textContent = part.content;
          item.appendChild(span);
        });
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
      }

      function loadNodesToUlElement(ulElement, nodes, blueprints) {
        for (let node of nodes) {
          addNodeToUlElement(ulElement, node, nodes, blueprints);
        }
      }

      function addNodeToUlElement(ulElement, node, nodes, blueprints) {
        // Create a new <li> element
        const liElement = document.createElement("li");
        liElement.className = "node";
        nodeName = blueprints.find(
          (blueprint) => blueprint._id === node.loadsBlueprintId
        ).name;

        liElement.innerHTML = `<div class="nodeInfo"><span class="nodeName">${nodeName}</span><span class="nodeId">id: ${node.loadsBlueprintId}</span></div>`;

        // Create a delete button
        const deleteButton = document.createElement("button");
        deleteButton.textContent = "remove";
        deleteButton.className = "deleteNode";
        deleteButton.type = "button";
        deleteButton.onclick = function () {
          ulElement.removeChild(liElement);
          deleteNodeById(node._id, nodes, ulElement, blueprints);
        };

        // Append the delete button to the <li>
        liElement.appendChild(deleteButton);

        // Append the <li> to the <ul>
        ulElement.appendChild(liElement);
      }

      function deleteNodeById(id, nodes, ulElement, blueprints) {
        let index = nodes.findIndex((node) => node._id === id);
        if (index !== -1) {
          nodes.splice(index, 1);
          clearUl(ulElement);
          loadNodesToUlElement(ulElement, nodes, blueprints);
        }
      }

      function clearUl(ul) {
        while (ul.firstChild) {
          ul.removeChild(ul.firstChild);
        }
      }

      function showHelpArray(messageArray) {
        messageArray.forEach((message) => {
          appendSafeMessageToTerminal({ type: "help", content: message });
        });
      }
    </script>
  </body>
</html>
