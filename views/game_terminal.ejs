<!DOCTYPE html>
<html lang="en">

  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>Restoria 0.0.1 with ejs</title>
    <link rel="stylesheet" href="styles.css">
  </head>

  <body>
    <nav class="nav">
        <h1>Restoria 0.0.1 with ejs</h1>
        <span class="username">Username: <%= username %></span>
          <form action="/logout" method="post">
            <button class="logout" type="submit">Sign out</button>
          </form>
    </nav>
    <ul id="messages"></ul>
    <form id="commandForm" action="">
      <label for="input"></label>
      <input id="input" autocomplete="off" /><button type="submit">Send</button>
    </form>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io(); // no URL needed for now; defaults to host that serves the page
      const username = '<%= username %>';
      const validCommandWords = '<%- JSON.stringify(validCommandWords) %>';
      const commandForm = document.getElementById('commandForm');
      const input = document.getElementById('input');
      const messages = document.getElementById('messages');

      //methods definitions (validation and parsing are client version)
      function isValidCommandWord (commandWord) {
          if (!validCommandWords.includes(commandWord.toLowerCase())) {
            return false;
          }
          return true;
      };
      function parseCommand (command) {
          const parsedCommand = {};
          splitCommand = command.split(" ");
          parsedCommand.commandWord = splitCommand[0];
          if (splitCommand.length > 1) {
          parsedCommand.string = splitCommand.slice(1).join(" ");
          }

          return parsedCommand;
      };
      function appendStringToTerminal (message) {
        //TODO unpack string and class (for style) from message object
          const item = document.createElement('li');
          item.textContent = message;
          messages.appendChild(item);
          window.scrollTo(0, document.body.scrollHeight);
      };

      /*TODO write appendSafeStringToTerminal function to 
      unpack and display emits that don't include user-gen content, 
      allowing inner html for multi-color lines */

      commandForm.addEventListener('submit', (e) => {
        e.preventDefault();
        if (input.value) {
          parsedCommand = parseCommand(input.value);
          //reject invalid command words
          if (!isValidCommandWord(parsedCommand.commandWord)) {
            const shortenedCommand = parsedCommand.commandWord.slice(0, 10);
            appendStringToTerminal(`Sorry, '${shortenedCommand}' is not a valid command word.`);
            input.value = '';
            return;
          }
          socket.emit('user command', input.value);
          input.value = '';
        }
      });

      //TODO use appendStringToTerminal for 'say' and 'invalid' events
      socket.on('say', (userInput) => {
        const item = document.createElement('li');
        //TODO replace username below with parsedCommand.speaker
        item.textContent = `${username}: ${userInput}`;
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
      });

      socket.on('invalid', (rejectionString) => {
        appendStringToTerminal(rejectionString);
      });

    </script>
  </body>

</html>