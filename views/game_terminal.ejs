<! -- game_terminal.ejs -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <title>Restoria 0.0.1</title>
    <link rel="stylesheet" href="styles.css" />
  </head>

  <body>
    <nav class="nav">
      <h1>Restoria 0.0.1</h1>
      <form action="/logout" method="post">
        <button class="logout" type="submit">Quit</button>
      </form>
    </nav>

    <div>
      <div id="messagesContainer">
        <ul id="messages"></ul>
      </div>

      <form id="createRoomForm" class="sideForm" style="display: none">
        <section>
          <label for="newRoomName">Name:</label>
          <input
            id="newRoomName"
            name="newRoomName"
            type="text"
            autocomplete="newRoomName"
            required
          />
        </section>
        <section>
          <label for="newRoomDirection">Direction:</label>
          <select id="newRoomDirection" name="newRoomDirection" required>
            <option value="north">north</option>
            <option value="east">east</option>
            <option value="south">south</option>
            <option value="west">west</option>
            <option value="up">up</option>
            <option value="down">down</option>
          </select>
        </section>
        <section>
          <input type="checkbox" id="isDark" name="isDark" value="isDark" />
          <label for="isDark">Dark</label>
          <input
            type="checkbox"
            id="isIndoors"
            name="isIndoors"
            value="isIndoors"
          />
          <label for="isIndoors">Indoors</label>

          <input
            type="checkbox"
            id="isOnWater"
            name="isOnWater"
            value="isOnWater"
          />

          <label for="isOnWater">On Water</label>
          <input
            type="checkbox"
            id="isUnderwater"
            name="isUnderwater"
            value="isUnderwater"
          />
          <label for="isUnderwater">Underwater</label>
        </section>
        <section>
          <label for="lookRoom">Look:</label>
          <textarea
            id="lookRoom"
            name="lookRoom"
            type="text"
            autocomplete="lookRoom"
          ></textarea>
        </section>
        <section>
          <label for="examineRoom">Examine:</label>
          <textarea
            id="examineRoom"
            name="examineRoom"
            type="text"
            autocomplete="examineRoom"
          ></textarea>
        </section>
        <section>
          <label for="studyRoom">Study:</label>
          <textarea
            id="studyRoom"
            name="studyRoom"
            type="text"
            autocomplete="studyRoom"
          ></textarea>
        </section>
        <section>
          <label for="researchRoom">Research:</label>
          <textarea
            id="researchRoom"
            name="researchRoom"
            type="text"
            autocomplete="researchRoom"
          ></textarea>
        </section>
        <button type="submit">Create Room</button>
        <button type="button" id="cancelCreateRoomForm">Cancel</button>
      </form>

      <form id="createUserForm" class="sideForm" style="display: none">
        <section>
          <label for="newUserName">Name:</label>
          <input
            id="newUserName"
            name="newUserName"
            type="text"
            autocomplete="newUserName"
            required
          />
        </section>
        <section>
          <label for="new-password">Password:</label>
          <input
            id="new-password"
            name="password"
            type="password"
            autocomplete="new-password"
            required
          />
        </section>
        <section>
          <label for="pronouns">Pronouns:</label>
          <select id="pronouns" name="pronouns" required>
            <option value="0">He/Him</option>
            <option value="1">It/It</option>
            <option value="2">She/Her</option>
            <option value="3">They/Them</option>
          </select>
        </section>
        <section>
          <label for="job">Job:</label>
          <select id="job" name="job" required>
            <option value="cleric">Cleric</option>
            <option value="mage">Mage</option>
            <option value="rogue">Rogue</option>
            <option value="warrior">Warrior</option>
          </select>
        </section>
        <button type="submit">Create User</button>
        <button type="button" id="cancelCreateUserForm">Cancel</button>
      </form>

      <form id="editUserForm" class="sideForm" style="display: none">
        <section>
          <label for="examineUser">Examine:</label>
          <textarea
            id="examineUser"
            name="examineUser"
            type="text"
            autocomplete="examineUser"
          ></textarea>
        </section>
        <section>
          <label for="studyUser">Study:</label>
          <textarea
            id="studyUser"
            name="studyUser"
            type="text"
            autocomplete="studyUser"
          ></textarea>
        </section>
        <section>
          <label for="researchUser">Research:</label>
          <textarea
            id="researchUser"
            name="researchUser"
            type="text"
            autocomplete="researchUser"
          ></textarea>
        </section>
        <button type="submit">Update Description</button>
        <button type="button" id="cancelEditUserForm">Cancel</button>
      </form>
    </div>

    <form id="commandForm" action="">
      <label for="commandInput"></label>
      <input id="commandInput" autocomplete="off" />
      <button type="submit">Send</button>
    </form>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io(); // no URL needed for now; defaults to host that serves the page
      const validCommandWords = <%- JSON.stringify(validCommandWords) %>;
      const commandForm = document.getElementById("commandForm");
      const createRoomForm = document.getElementById("createRoomForm");
      const createUserForm = document.getElementById("createUserForm");
      const editUserForm = document.getElementById("editUserForm");
      const newUserName = document.getElementById("newUserName");
      const password = document.getElementById("new-password");
      const input = document.getElementById("commandInput");
      const messagesContainer = document.getElementById("messagesContainer");
      const messages = document.getElementById("messages");
      const directionSelect = document.getElementById("newRoomDirection");

      //methods definitions (validation and parsing are client version)
      function isValidCommandWord(commandWord) {
        if (!validCommandWords.includes(commandWord.toLowerCase())) {
          return false;
        }
        return true;
      }

      function parseCommand(command) {
        const parsedCommand = {};
        const splitCommand = command.split(" ");
        parsedCommand.commandWord = splitCommand[0];
        if (splitCommand.length > 1) {
          parsedCommand.string = splitCommand.slice(1).join(" ");
        }
        return parsedCommand;
      }

      function appendMessageToTerminal(message) {
        const item = document.createElement("li");
        item.classList.add('message-item'); // Add message-item class
        item.textContent = message.content;
        item.classList.add(message.type);
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
      }

      // Form cancel button listeners
      document.getElementById("cancelCreateRoomForm").addEventListener("click", function () {
        createRoomForm.style.display = "none";
      });

      document.getElementById("cancelCreateUserForm").addEventListener("click", function () {
        createUserForm.style.display = "none";
      });

      document.getElementById("cancelEditUserForm").addEventListener("click", function () {
        editUserForm.style.display = "none";
      });

      let activeForm = editUserForm;

      // Form submit button listeners
      commandForm.addEventListener("submit", (e) => {
        e.preventDefault();
        if (input.value) {
          const parsedCommand = parseCommand(input.value);
          //reject invalid command words

          if (!isValidCommandWord(parsedCommand.commandWord)) {
            const shortenedCommand = parsedCommand.commandWord.slice(0, 10);
            appendMessageToTerminal(
              { type: "rejection", content: `Sorry, '${shortenedCommand}' is not a valid command word.` }
            );
            input.value = "";
            return;
          }
          socket.emit("userSentCommand", input.value);
          input.value = "";
        }
      });

      createRoomForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const roomData = {
          name: document.getElementById("newRoomName").value,
          direction: document.getElementById("newRoomDirection").value,
          isDark: document.getElementById("isDark").checked,
          isIndoors: document.getElementById("isIndoors").checked,
          isOnWater: document.getElementById("isOnWater").checked,
          isUnderwater: document.getElementById("isUnderwater").checked,
          look: document.getElementById("lookRoom").value,
          examine: document.getElementById("examineRoom").value,
          study: document.getElementById("studyRoom").value,
          research: document.getElementById("researchRoom").value,
        };
        socket.emit("userSubmittedNewRoom", roomData);
        createRoomForm.reset();
        createRoomForm.style.display = "none"; // Hide the form after submission
      });

      createUserForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const userData = {
          username: document.getElementById("newUserName").value.toLowerCase(),
          name: document.getElementById("newUserName").value,
          password: document.getElementById("new-password").value,
          pronouns: document.getElementById("pronouns").value,
          job: document.getElementById("job").value,
        };
        socket.emit("userSubmittedNewUser", userData);
        createUserForm.reset();
        createUserForm.style.display = "none"; // Hide the form after submission
      });

      editUserForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const userDescription = {
          examine: document.getElementById("examineUser").value,
          study: document.getElementById("studyUser").value,
          research: document.getElementById("researchUser").value,
        };
        socket.emit("userSubmittedUserDescription", userDescription);
        editUserForm.reset();
        editUserForm.style.display = "none"; // Hide the form after submission
      });

      socket.on("openCreateRoomForm", (formData) => {
        console.log(`openCreateRoomForm received formData: ${JSON.stringify(formData)}`);
        activeForm.reset();
        activeForm.style.display = "none";
        activeForm = createRoomForm;
        activeForm.style.display = "block";
        input.value = "";

        // Update the direction select element
        directionSelect.innerHTML = ''; // Clear existing options

        formData.unusedExits.forEach(exit => {
          const option = document.createElement('option');
          option.value = exit;
          option.textContent = exit;
          directionSelect.appendChild(option);
        });
      });

      socket.on("openCreateUserForm", () => {
        activeForm.reset();
        activeForm.style.display = "none";
        activeForm = createUserForm;
        activeForm.style.display = "block";
        input.value = "";
      });

      socket.on("openEditUserForm", (formData) => {
        activeForm.reset();
        activeForm.style.display = "none";
        activeForm = editUserForm;
        activeForm.style.display = "block";
        input.value = "";
        // Set the values of the textareas based on formData
        document.getElementById("examineUser").value = formData.examine || '';
        document.getElementById("studyUser").value = formData.study || '';
        document.getElementById("researchUser").value = formData.research || '';
      });

      socket.on("invalid", (rejectionString) => {
        appendMessageToTerminal({ type: "rejection", content: "Server says invalid command." });
      });

      socket.on("redirectToLogin", () => {
        socket.disconnect();
        window.location.href = "/login";
      });

      socket.on("message", (message) => {
        appendMessageToTerminal(message);
      });

      window.addEventListener('beforeunload', function (event) {
        socket.disconnect();
      });

      document.querySelector('.logout').addEventListener('click', function (event) {
        socket.disconnect();
      });
    </script>
  </body>
</html>
