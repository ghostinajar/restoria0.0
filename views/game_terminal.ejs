<! -- game_terminal.ejs -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <title>Restoria 0.0.1</title>
    <link rel="stylesheet" href="styles.css" />
  </head>

  <body>
    <nav class="nav">
      <h1>Restoria 0.0.1</h1>
      <form action="/logout" method="post">
        <button class="logout" type="submit">Quit</button>
      </form>
    </nav>

    <!-- Messages and side forms -->
    <div>
      <div id="messagesContainer">
        <ul id="messages"></ul>
      </div>
      <!-- Edit mob select -->
      <form 
        id="editMobSelect"
        class="sideForm"
        style="display: none"
        autocomplete="off"
      >
      <section>
        <label for="editMobSelectName">Name:</label>
        <select id="editMobSelectName" name="editMobSelectName" required>
          <!-- populated by script -->
        </select>
      </section>
      <button type="submit">Select Mob</button>
      <button type="button" id="cancelEditMobSelect">Cancel</button>
      </form>
      <!-- Create Mob form -->
      <form
        id="createMobForm"
        class="sideForm"
        style="display: none"
        autocomplete="off"
      >
        <section>
          <label for="newMobName">Name:</label>
          <input
            id="newMobName"
            name="newMobName"
            type="text"
            maxlength="36"
            required
          />
        </section>
        <section>
          <label for="newMobPronouns">Pronouns:</label>
          <select id="newMobPronouns" name="newMobPronouns" required>
            <option value="0">He/Him</option>
            <option value="1">It/It</option>
            <option value="2">She/Her</option>
            <option value="3">They/Them</option>
          </select>
        </section>
        <section>
          <label for="newMobLevel">Level:</label>
          <select id="newMobLevel" name="newMobLevel" required>
            <!-- populated by script -->
          </select>
          <label for="newMobJob">Job:</label>
          <select id="newMobJob" name="newMobJob" required>
            <option value="cleric">Cleric</option>
            <option value="mage">Mage</option>
            <option value="rogue">Rogue</option>
            <option value="warrior">Warrior</option>
          </select>
        </section>
        <!-- statBlock -->
        <section>
          <label for="newMobStr">Str:</label>
          <select id="newMobStr" name="newMobStr" required>
            <!-- populated by script -->
          </select>
          <label for="newMobDex">Dex:</label>
          <select id="newMobDex" name="newMobDex" required>
            <!-- populated by script -->
          </select>
          <label for="newMobCon">Con:</label>
          <select id="newMobCon" name="newMobCon" required>
            <!-- populated by script -->
          </select>
        </section>
        <section>
          <label for="newMobInt">Int:</label>
          <select id="newMobInt" name="newMobInt" required>
            <!-- populated by script -->
          </select>
          <label for="newMobWis">Wis:</label>
          <select id="newMobWis" name="newMobWis" required>
            <!-- populated by script -->
          </select>
          <label for="newMobSpi">Spi:</label>
          <input
            id="newMobSpi"
            name="newMobSpi"
            type="number"
            min="-1000"
            max="1000"
            value="0"
            step="100"
            required
          />
        </section>
        <section>
          <label for="newMobKeywords">Keywords:</label>
          <input
            id="newMobKeywords"
            name="newMobKeywords"
            maxlength="80"
            required
          />
        </section>
        <section>
          <input
            type="checkbox"
            id="newMobIsUnique"
            name="newMobIsUnique"
            value="isUnewMobIsUniquenique"
          />
          <label for="newMobIsUnique">Unique</label>
          <input
            type="checkbox"
            id="newMobIsMount"
            name="newMobIsMount"
            value="newMobIsMount"
          />
          <label for="newMobIsMount">Mount</label>

          <input
            type="checkbox"
            id="newMobIsAggressive"
            name="newMobIsAggressive"
            value="newMobIsAggressive"
          />
          <label for="newMobIsAggressive">Aggressive</label>
        </section>
        <section>
          <label for="newLookMob">Look:</label>
          <input id="newLookMob" name="newLookMob" type="text" maxlength="80" />
        </section>
        <section>
          <label for="newExamineMob">Examine:</label>
          <textarea
            id="newExamineMob"
            name="newExamineMob"
            type="text"
            maxlength="240"
          ></textarea>
        </section>
        <section>
          <label for="newStudyMob">Study:</label>
          <textarea
            id="newStudyMob"
            name="newStudyMob"
            type="text"
            maxlength="640"
          ></textarea>
        </section>
        <section>
          <label for="newResearchMob">Research:</label>
          <textarea
            id="newResearchMob"
            name="newResearchMob"
            type="text"
            maxlength="1600"
          ></textarea>
        </section>
        <button type="submit">Create Mob</button>
        <button type="button" id="cancelCreateMobForm">Cancel</button>
      </form>
      <!-- Create room form -->
      <form
        id="createRoomForm"
        class="sideForm"
        style="display: none"
        autocomplete="off"
      >
        <section>
          <label for="newRoomName">Name:</label>
          <input
            id="newRoomName"
            name="newRoomName"
            type="text"
            autocomplete="on"
            maxlength="60"
            required
          />
        </section>
        <section>
          <label for="newRoomDirection">Direction:</label>
          <select id="newRoomDirection" name="newRoomDirection" required>
            <option value="north">north</option>
            <option value="east">east</option>
            <option value="south">south</option>
            <option value="west">west</option>
            <option value="up">up</option>
            <option value="down">down</option>
          </select>
        </section>
        <section>
          <input
            type="checkbox"
            id="newIsDark"
            name="newIsDark"
            value="newIsDark"
          />
          <label for="newIsDark">Dark</label>
          <input
            type="checkbox"
            id="newIsIndoors"
            name="newIsIndoors"
            value="newIsIndoors"
          />
          <label for="newIsIndoors">Indoors</label>

          <input
            type="checkbox"
            id="newIsOnWater"
            name="newIsOnWater"
            value="newIsOnWater"
          />
          <label for="newIsOnWater">On Water</label>

          <input
            type="checkbox"
            id="newIsUnderwater"
            name="newIsUnderwater"
            value="newIsUnderwater"
          />
          <label for="newIsUnderwater">Underwater</label>
        </section>
        <section>
          <label for="newExamineRoom">Examine:</label>
          <textarea
            id="newExamineRoom"
            name="newExamineRoom"
            type="text"
            maxlength="240"
          ></textarea>
        </section>
        <section>
          <label for="newStudyRoom">Study:</label>
          <textarea
            id="newStudyRoom"
            name="newStudyRoom"
            type="text"
            maxlength="640"
          ></textarea>
        </section>
        <section>
          <label for="newResearchRoom">Research:</label>
          <textarea
            id="newResearchRoom"
            name="newResearchRoom"
            type="text"
            maxlength="1600"
          ></textarea>
        </section>
        <button type="submit">Create Room</button>
        <button type="button" id="cancelCreateRoomForm">Cancel</button>
      </form>
      <!-- Create user form -->
      <form
        id="createUserForm"
        class="sideForm"
        style="display: none"
        autocomplete="off"
      >
        <section>
          <label for="newUserName">Name:</label>
          <input
            id="newUserName"
            name="newUserName"
            type="text"
            maxlength="18"
            required
          />
        </section>
        <section>
          <label for="new-password">Password:</label>
          <input id="new-password" name="password" type="password" required />
        </section>
        <section>
          <label for="pronouns">Pronouns:</label>
          <select id="pronouns" name="pronouns" required>
            <option value="0">He/Him</option>
            <option value="1">It/It</option>
            <option value="2">She/Her</option>
            <option value="3">They/Them</option>
          </select>
        </section>
        <section>
          <label for="job">Job:</label>
          <select id="job" name="job" required>
            <option value="cleric">Cleric</option>
            <option value="mage">Mage</option>
            <option value="rogue">Rogue</option>
            <option value="warrior">Warrior</option>
          </select>
        </section>
        <button type="submit">Create User</button>
        <button type="button" id="cancelCreateUserForm">Cancel</button>
      </form>
      <!-- Edit mob blueprint form -->
      <form
        id="editMobBlueprintForm"
        class="sideForm"
        style="display: none"
        autocomplete="off"
      >
        <section>
          <label for="editMobName">Name:</label>
          <input
            id="editMobName"
            name="editMobName"
            type="text"
            maxlength="36"
            required
          />
        </section>
        <section>
          <label for="editMobPronouns">Pronouns:</label>
          <select id="editMobPronouns" name="editMobPronouns" type="number" required>
            <option value="0">He/Him</option>
            <option value="1">It/It</option>
            <option value="2">She/Her</option>
            <option value="3">They/Them</option>
          </select>
        </section>
        <section>
          <label for="editMobLevel">Level:</label>
          <select id="editMobLevel" name="editMobLevel" type="number" required>
            <!-- populated by script -->
          </select>
          <label for="editMobJob">Job:</label>
          <select id="editMobJob" name="editMobJob" required>
            <option value="cleric">Cleric</option>
            <option value="mage">Mage</option>
            <option value="rogue">Rogue</option>
            <option value="warrior">Warrior</option>
          </select>
        </section>
        <!-- statBlock -->
        <section>
          <label for="editMobStr">Str:</label>
          <select id="editMobStr" name="editMobStr" type="number" required>
            <!-- populated by script -->
          </select>
          <label for="editMobDex">Dex:</label>
          <select id="editMobDex" name="editMobDex" type="number" required>
            <!-- populated by script -->
          </select>
          <label for="editMobCon">Con:</label>
          <select id="editMobCon" name="editMobCon" type="number" required>
            <!-- populated by script -->
          </select>
        </section>
        <section>
          <label for="editMobInt">Int:</label>
          <select id="editMobInt" name="editMobInt" type="number" required>
            <!-- populated by script -->
          </select>
          <label for="editMobWis">Wis:</label>
          <select id="editMobWis" name="editMobWis" type="number" required>
            <!-- populated by script -->
          </select>
          <label for="editMobSpi">Spi:</label>
          <input
            id="editMobSpi"
            name="editMobSpi"
            type="number"
            min="-1000"
            max="1000"
            value="0"
            step="100"
            required
          />
        </section>
        <section>
          <label for="editMobKeywords">Keywords:</label>
          <input
            id="editMobKeywords"
            name="editMobKeywords"
            maxlength="80"
            required
          />
        </section>
        <section>
          <input
            type="checkbox"
            id="editMobIsUnique"
            name="editMobIsUnique"
            value="editMobIsUnique"
          />
          <label for="editMobIsUnique">Unique</label>
          <input
            type="checkbox"
            id="editMobIsMount"
            name="editMobIsMount"
            value="editMobIsMount"
          />
          <label for="editMobIsMount">Mount</label>

          <input
            type="checkbox"
            id="editMobIsAggressive"
            name="editMobIsAggressive"
            value="editMobIsAggressive"
          />
          <label for="editMobIsAggressive">Aggressive</label>
        </section>
        <section>
          <label for="editLookMob">Look:</label>
          <input id="editLookMob" name="editLookMob" type="text" maxlength="80" />
        </section>
        <section>
          <label for="editExamineMob">Examine:</label>
          <textarea
            id="editExamineMob"
            name="editExamineMob"
            type="text"
            maxlength="240"
          ></textarea>
        </section>
        <section>
          <label for="editStudyMob">Study:</label>
          <textarea
            id="editStudyMob"
            name="editStudyMob"
            type="text"
            maxlength="640"
          ></textarea>
        </section>
        <section>
          <label for="editResearchMob">Research:</label>
          <textarea
            id="editResearchMob"
            name="editResearchMob"
            type="text"
            maxlength="1600"
          ></textarea>
        </section>
        <button type="submit">Update Mob</button>
        <button type="button" id="cancelEditMobBlueprintForm">Cancel</button>
      </form>
      <!-- Edit room form -->
      <form
        id="editRoomForm"
        class="sideForm"
        style="display: none"
        autocomplete="off"
      >
        <section>
          <label for="roomName">Name:</label>
          <input
            id="roomName"
            name="roomName"
            type="text"
            maxlength="60"
            required
          />
        </section>
        <section>
          <input type="checkbox" id="isDark" name="isDark" value="isDark" />
          <label for="isDark">Dark</label>
          <input
            type="checkbox"
            id="isIndoors"
            name="isIndoors"
            value="isIndoors"
          />
          <label for="isIndoors">Indoors</label>

          <input
            type="checkbox"
            id="isOnWater"
            name="isOnWater"
            value="isOnWater"
          />
          <label for="isOnWater">On Water</label>

          <input
            type="checkbox"
            id="isUnderwater"
            name="isUnderwater"
            value="isUnderwater"
          />
          <label for="isUnderwater">Underwater</label>
        </section>
        <section>
          <input
            type="checkbox"
            id="noMounts"
            name="noMounts"
            value="noMounts"
          />
          <label for="noMounts">No Mounts</label>
          <input type="checkbox" id="noMobs" name="noMobs" value="noMobs" />
          <label for="noMobs">No Mobs</label>

          <input type="checkbox" id="noMagic" name="noMagic" value="noMagic" />
          <label for="noMagic">No Magic</label>

          <input
            type="checkbox"
            id="noCombat"
            name="noCombat"
            value="noCombat"
          />
          <label for="noCombat">No Combat</label>
        </section>
        <section>
          <label for="examineRoom">Examine:</label>
          <textarea
            id="examineRoom"
            name="examineRoom"
            type="text"
            maxlength="240"
          ></textarea>
        </section>
        <section>
          <label for="studyRoom">Study:</label>
          <textarea
            id="studyRoom"
            name="studyRoom"
            type="text"
            maxlength="640"
          ></textarea>
        </section>
        <section>
          <label for="researchRoom">Research:</label>
          <textarea
            id="researchRoom"
            name="researchRoom"
            type="text"
            maxlength="1600"
          ></textarea>
        </section>
        <button type="submit">Update Room</button>
        <button type="button" id="cancelEditRoomForm">Cancel</button>
      </form>
      <!-- Edit user form -->
      <form
        id="editUserForm"
        class="sideForm"
        style="display: none"
        autocomplete="off"
      >
        <section>
          <label for="examineUser">Examine:</label>
          <textarea
            id="examineUser"
            name="examineUser"
            type="text"
            maxlength="240"
          ></textarea>
        </section>
        <section>
          <label for="studyUser">Study:</label>
          <textarea
            id="studyUser"
            name="studyUser"
            type="text"
            maxlength="640"
          ></textarea>
        </section>
        <section>
          <label for="researchUser">Research:</label>
          <textarea
            id="researchUser"
            name="researchUser"
            type="text"
            maxlength="1600"
          ></textarea>
        </section>
        <button type="submit">Update Description</button>
        <button type="button" id="cancelEditUserForm">Cancel</button>
      </form>
    </div>

    <!-- Command form -->
    <form id="commandForm" action="" autocomplete="off">
      <label for="commandInput"></label>
      <input id="commandInput" maxlength="80" />
      <button type="submit">Send</button>
    </form>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io(); // no URL needed for now; defaults to host that serves the page
      const validCommandWords = <%- JSON.stringify(validCommandWords) %>;
      const commandForm = document.getElementById("commandForm");
      const createMobForm = document.getElementById("createMobForm");
      const createRoomForm = document.getElementById("createRoomForm");
      const createUserForm = document.getElementById("createUserForm");
      const editMobBlueprintForm = document.getElementById("editMobBlueprintForm");
      let editMobId = '';
      const editMobSelect = document.getElementById("editMobSelect");
      const editRoomForm = document.getElementById("editRoomForm");
      const editUserForm = document.getElementById("editUserForm");
      const newUserName = document.getElementById("newUserName");
      const password = document.getElementById("new-password");
      const input = document.getElementById("commandInput");
      const messagesContainer = document.getElementById("messagesContainer");
      const messages = document.getElementById("messages");
      const directionSelect = document.getElementById("newRoomDirection");

      //methods definitions (validation and parsing are client version)
      function generateStringSelectOptions(stringArray, select) {
        select.options.length = 0;
        for (let i = 0; i <= stringArray.length-1; i++) {
            const option = document.createElement('option');
            option.value = stringArray[i].id;
            option.textContent = stringArray[i].value;
            select.appendChild(option);
        }
      }

      function generateNumberSelectOptions(min, max, select) {
        select.options.length = 0;
        for (let i = min; i <= max; i++) {
            const option = document.createElement('option');
            option.value = i;
            option.textContent = i;
            select.appendChild(option);
        }
      }
      generateNumberSelectOptions(1,31, document.getElementById('newMobLevel'));
      generateNumberSelectOptions(4,18, document.getElementById('newMobStr'));
      generateNumberSelectOptions(4,18, document.getElementById('newMobDex'));
      generateNumberSelectOptions(4,18, document.getElementById('newMobCon'));
      generateNumberSelectOptions(4,18, document.getElementById('newMobInt'));
      generateNumberSelectOptions(4,18, document.getElementById('newMobWis'));

      generateNumberSelectOptions(1,31, document.getElementById('editMobLevel'));
      generateNumberSelectOptions(4,18, document.getElementById('editMobStr'));
      generateNumberSelectOptions(4,18, document.getElementById('editMobDex'));
      generateNumberSelectOptions(4,18, document.getElementById('editMobCon'));
      generateNumberSelectOptions(4,18, document.getElementById('editMobInt'));
      generateNumberSelectOptions(4,18, document.getElementById('editMobWis'));

      function isValidCommandWord(commandWord) {
        if (!validCommandWords.includes(commandWord.toLowerCase())) {
          return false;
        }
        return true;
      }

      function parseCommand(command) {
        const parsedCommand = {};
        const splitCommand = command.split(" ");
        parsedCommand.commandWord = splitCommand[0];
        if (splitCommand.length > 1) {
          parsedCommand.string = splitCommand.slice(1).join(" ");
        }
        return parsedCommand;
      }

      function appendMessageToTerminal(message) {
        const item = document.createElement("li");
        item.classList.add('message-item'); // Add message-item class
        item.textContent = message.content;
        item.classList.add(message.type);
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
      }

      // Form cancel button listeners
      document.getElementById("cancelCreateMobForm").addEventListener("click", function () {
        createMobForm.style.display = "none";
      });

      document.getElementById("cancelCreateRoomForm").addEventListener("click", function () {
        createRoomForm.style.display = "none";
      });

      document.getElementById("cancelCreateUserForm").addEventListener("click", function () {
        createUserForm.style.display = "none";
      });

      document.getElementById("cancelEditMobSelect").addEventListener("click", function () {
        editMobSelect.style.display = "none";
      });

      document.getElementById("cancelEditMobBlueprintForm").addEventListener("click", function () {
        editMobBlueprintForm.style.display = "none";
      });

      document.getElementById("cancelEditUserForm").addEventListener("click", function () {
        editUserForm.style.display = "none";
      });

      document.getElementById("cancelEditRoomForm").addEventListener("click", function () {
        editRoomForm.style.display = "none";
      });

      let activeForm = editUserForm;

      // Form submit button listeners
      commandForm.addEventListener("submit", (e) => {
        e.preventDefault();
        if (input.value) {
          const parsedCommand = parseCommand(input.value);
          //reject invalid command words

          if (!isValidCommandWord(parsedCommand.commandWord)) {
            const shortenedCommand = parsedCommand.commandWord.slice(0, 10);
            appendMessageToTerminal(
              { type: "rejection", content: `Sorry, '${shortenedCommand}' is not a valid command word.` }
            );
            input.value = "";
            return;
          }
          socket.emit("userSentCommand", input.value);
          input.value = "";
        }
      });

      createMobForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const createMobFormData = {
          _id: editMobId,
          name: document.getElementById("newMobName").value,
          pronouns: Number(document.getElementById("newMobPronouns").value),
          level: Number(document.getElementById("newMobLevel").value),
          job: document.getElementById("newMobJob").value,
          statBlock: {
            strength: Number(document.getElementById("newMobStr").value),
            dexterity: Number(document.getElementById("newMobDex").value),
            constitution: Number(document.getElementById("newMobCon").value),
            intelligence: Number(document.getElementById("newMobInt").value),
            wisdom: Number(document.getElementById("newMobWis").value),
            charisma: 10,
            spirit: Number(document.getElementById("newMobSpi").value),
          },
          keywords: document.getElementById("newMobKeywords").value.split(/[ ,]+/),
          isUnique: document.getElementById("newMobIsUnique").checked,
          isMount: document.getElementById("newMobIsMount").checked,
          isAggressive: document.getElementById("newMobIsAggressive").checked,
          description: {
            look: document.getElementById("newLookMob").value,
            examine: document.getElementById("newExamineMob").value,
            study: document.getElementById("newStudyMob").value,
            research: document.getElementById("newResearchMob").value,
          },
        };
        socket.emit("userSubmittedNewMobBlueprint", createMobFormData);
        createMobForm.reset();
        createMobForm.style.display = "none"; // Hide the form after submission
      });

      createRoomForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const roomData = {
          name: document.getElementById("newRoomName").value,
          direction: document.getElementById("newRoomDirection").value,
          isDark: document.getElementById("newIsDark").checked,
          isIndoors: document.getElementById("newIsIndoors").checked,
          isOnWater: document.getElementById("newIsOnWater").checked,
          isUnderwater: document.getElementById("newIsUnderwater").checked,
          noMounts: false,
          noMobs: false,
          noMagic: false,
          noCombat: false,
          examine: document.getElementById("newExamineRoom").value,
          study: document.getElementById("newStudyRoom").value,
          research: document.getElementById("newResearchRoom").value,
        };
        socket.emit("userSubmittedNewRoom", roomData);
        createRoomForm.reset();
        createRoomForm.style.display = "none"; // Hide the form after submission
      });

      createUserForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const userData = {
          username: document.getElementById("newUserName").value.toLowerCase(),
          name: document.getElementById("newUserName").value,
          password: document.getElementById("new-password").value,
          pronouns: document.getElementById("pronouns").value,
          job: document.getElementById("job").value,
        };
        socket.emit("userSubmittedNewUser", userData);
        createUserForm.reset();
        createUserForm.style.display = "none"; // Hide the form after submission
      });

      editMobBlueprintForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const mobId = editMobId;
        const editMobBlueprintFormData = {
          name: document.getElementById("editMobName").value,
          pronouns: Number(document.getElementById("editMobPronouns").value),
          level: Number(document.getElementById("editMobLevel").value),
          job: document.getElementById("editMobJob").value,
          statBlock: {
            strength: Number(document.getElementById("editMobStr").value),
            dexterity: Number(document.getElementById("editMobDex").value),
            constitution: Number(document.getElementById("editMobCon").value),
            intelligence: Number(document.getElementById("editMobInt").value),
            wisdom: Number(document.getElementById("editMobWis").value),
            charisma: 10,
            spirit: Number(document.getElementById("editMobSpi").value),
          },
          keywords: document.getElementById("editMobKeywords").value.split(/[ ,]+/),
          isUnique: document.getElementById("editMobIsUnique").checked,
          isMount: document.getElementById("editMobIsMount").checked,
          isAggressive: document.getElementById("editMobIsAggressive").checked,
          description: {
            look: document.getElementById("editLookMob").value,
            examine: document.getElementById("editExamineMob").value,
            study: document.getElementById("editStudyMob").value,
            research: document.getElementById("editResearchMob").value,
          },
        };
        socket.emit("userSubmittedEditMobBlueprint", mobId, editMobBlueprintFormData);
        editMobBlueprintForm.reset();
        editMobBlueprintForm.style.display = "none"; // Hide the form after submission
      });

      editMobSelect.addEventListener("submit", (e) => {
        e.preventDefault();
        editMobId = document.getElementById("editMobSelectName").value;
        socket.emit("userSelectedMobEdit", editMobId);
        editMobSelect.reset();
        editMobSelect.style.display = "none"; // Hide the form after submission
      });

      editRoomForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const roomData = {
          name: document.getElementById("roomName").value,
          direction: '',
          isDark: document.getElementById("isDark").checked,
          isIndoors: document.getElementById("isIndoors").checked,
          isOnWater: document.getElementById("isOnWater").checked,
          isUnderwater: document.getElementById("isUnderwater").checked,
          noMounts: document.getElementById("noMounts").checked,
          noMobs: document.getElementById("noMobs").checked,
          noMagic: document.getElementById("noMagic").checked,
          noCombat: document.getElementById("noCombat").checked,
          examine: document.getElementById("examineRoom").value,
          study: document.getElementById("studyRoom").value,
          research: document.getElementById("researchRoom").value,
        };
        socket.emit("userSubmittedRoomEdit", roomData);
        editRoomForm.reset();
        editRoomForm.style.display = "none"; // Hide the form after submission
      });

      editUserForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const userDescription = {
          examine: document.getElementById("examineUser").value,
          study: document.getElementById("studyUser").value,
          research: document.getElementById("researchUser").value,
        };
        socket.emit("userSubmittedUserDescription", userDescription);
        editUserForm.reset();
        editUserForm.style.display = "none"; // Hide the form after submission
      });

      //socket event listeners
      socket.on("openCreateMobForm", (formData) => {
        console.log(`openCreateMobForm received formData: ${JSON.stringify(formData)}`);
        activeForm.reset();
        activeForm.style.display = "none";
        activeForm = createMobForm; 
        activeForm.style.display = "block";
        input.value = "";
      });

      socket.on("openCreateRoomForm", (formData) => {
        console.log(`openCreateRoomForm received formData: ${JSON.stringify(formData)}`);
        activeForm.reset();
        activeForm.style.display = "none";
        activeForm = createRoomForm;
        activeForm.style.display = "block";
        input.value = "";

        // Update the direction select element
        directionSelect.innerHTML = ''; // Clear existing options

        formData.unusedExits.forEach(exit => {
          const option = document.createElement('option');
          option.value = exit;
          option.textContent = exit;
          directionSelect.appendChild(option);
        });
      });

      socket.on("openCreateUserForm", () => {
        activeForm.reset();
        activeForm.style.display = "none";
        activeForm = createUserForm;
        activeForm.style.display = "block";
        input.value = "";
      });

      socket.on("openEditMobSelect", (formData) => {
        activeForm.reset();
        activeForm.style.display = "none";
        activeForm = editMobSelect;
        activeForm.style.display = "block";
        input.value = "";
        // Set the editMobSelectName options
        generateStringSelectOptions(formData, document.getElementById('editMobSelectName'))
      });
      
      socket.on("openEditMobBlueprintForm", (formData) => {
        activeForm.reset();
        activeForm.style.display = "none";
        activeForm = editMobBlueprintForm;
        activeForm.style.display = "block";
        input.value = "";
        console.log(JSON.stringify(formData));
        // Set the values of the fields based on formData
        document.getElementById("editMobName").value = formData.name || '';
        document.getElementById("editMobPronouns").value = formData.pronouns || 0;
        document.getElementById("editMobLevel").value = formData.level || 1;
        document.getElementById("editMobJob").value = formData.job || 'cleric';
        document.getElementById("editMobStr").value = formData.statBlock.strength || 4;
        document.getElementById("editMobDex").value = formData.statBlock.dexterity || 4;
        document.getElementById("editMobCon").value = formData.statBlock.constitution || 4;
        document.getElementById("editMobInt").value = formData.statBlock.intelligence || 4;
        document.getElementById("editMobWis").value = formData.statBlock.wisdom || 4;
        document.getElementById("editMobSpi").value = formData.statBlock.spirit || 0;
        document.getElementById("editMobKeywords").value = formData.keywords || '';
        document.getElementById("editMobIsUnique").checked = formData.isUnique || '';
        document.getElementById("editMobIsMount").checked = formData.isMount || '';
        document.getElementById("editMobIsAggressive").checked = formData.isAggressive || '';
        document.getElementById("editLookMob").value = formData.description.look || '';
        document.getElementById("editExamineMob").value = formData.description.examine || '';
        document.getElementById("editStudyMob").value = formData.description.study || '';
        document.getElementById("editResearchMob").value = formData.description.research || '';
      });

      socket.on("openEditUserForm", (formData) => {
        activeForm.reset();
        activeForm.style.display = "none";
        activeForm = editUserForm;
        activeForm.style.display = "block";
        input.value = "";
        // Set the values of the textareas based on formData
        document.getElementById("examineUser").value = formData.examine || '';
        document.getElementById("studyUser").value = formData.study || '';
        document.getElementById("researchUser").value = formData.research || '';
      });

      socket.on("openEditRoomForm", (formData) => {
        activeForm.reset();
        activeForm.style.display = "none";
        activeForm = editRoomForm;
        activeForm.style.display = "block";
        input.value = "";
        console.log(JSON.stringify(formData));
        // Set the values of the fields based on formData
        document.getElementById("roomName").value = formData.name || '';
        document.getElementById("isDark").checked = formData.isDark || false;
        document.getElementById("isIndoors").checked = formData.isIndoors || false;
        document.getElementById("isOnWater").checked = formData.isOnWater || false;
        document.getElementById("isUnderwater").checked = formData.isUnderwater || false;
        document.getElementById("noMounts").checked = formData.noMounts || false;
        document.getElementById("noMobs").checked = formData.noMobs || false;
        document.getElementById("noMagic").checked = formData.noMagic || false;
        document.getElementById("noCombat").checked = formData.noCombat || false;
        document.getElementById("examineRoom").value = formData.examine || '';
        document.getElementById("studyRoom").value = formData.study || '';
        document.getElementById("researchRoom").value = formData.research || '';
      });

      socket.on("invalid", (rejectionString) => {
        appendMessageToTerminal({ type: "rejection", content: "Server says invalid command." });
      });

      socket.on("redirectToLogin", () => {
        socket.disconnect();
        window.location.href = "/login";
      });

      socket.on("message", (message) => {
        appendMessageToTerminal(message);
      });

      window.addEventListener('beforeunload', function (event) {
        socket.disconnect();
      });

      document.querySelector('.logout').addEventListener('click', function (event) {
        socket.disconnect();
      });
    </script>
  </body>
</html>
