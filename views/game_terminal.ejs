<! -- game_terminal.ejs -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <title>Restoria 0.0.1</title>
    <link rel="stylesheet" href="styles.css" />
    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io(); // no URL needed for now; defaults to host that serves the page
    </script>
  </head>

  <body>
    <nav class="nav">
      <h1>Restoria 0.0.1</h1>
      <form action="/logout" method="post">
        <button id="logout" type="submit">Quit</button>
      </form>
    </nav>

    <!-- Messages and side forms -->
    <div id="main">
      <div id="messagesContainer">
        <ul id="messages"></ul>
      </div>
      <%- include('create_item_blueprint_form'); %>
      <%- include('create_mob_blueprint_form'); %>
      <%- include('create_room_form'); %>
      <%- include('create_user_form'); %>
      <%- include('edit_item_blueprint_form'); %>
      <%- include('edit_item_select_form'); %>
      <%- include('edit_mob_blueprint_form'); %>
      <%- include('edit_mob_select_form'); %>
      <%- include('edit_room_form'); %>
      <%- include('edit_user_form'); %>
    </div>

    <!-- User input command form -->
    <%- include('command_form'); %>

    <script>
      const messagesContainer = document.getElementById("messagesContainer");
      const messages = document.getElementById("messages");
      let activeForm = editUserForm;

      //methods definitions (validation and parsing are client version)
      function generateStringSelectOptions(stringArray, select) {
        select.options.length = 0;
        for (let i = 0; i <= stringArray.length-1; i++) {
            const option = document.createElement('option');
            option.value = stringArray[i].id;
            option.textContent = stringArray[i].value;
            select.appendChild(option);
        }
      }

      function generateNumberSelectOptions(min, max, select) {
        select.options.length = 0;
        for (let i = min; i <= max; i++) {
            const option = document.createElement('option');
            option.value = i;
            option.textContent = i;
            select.appendChild(option);
        }
      }

      function appendMessageToTerminal(message) {
        const item = document.createElement("li");
        item.classList.add('message-item'); // Add message-item class
        item.textContent = message.content;
        item.classList.add(message.type);
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
      }
      
      //socket event listeners         
      socket.on("invalid", (rejectionString) => {
        appendMessageToTerminal({ type: "rejection", content: "Server says invalid command." });
      });

      socket.on("redirectToLogin", () => {
        socket.disconnect();
        window.location.href = "/login";
      });

      socket.on("message", (message) => {
        appendMessageToTerminal(message);
      });

      window.addEventListener('beforeunload', function (event) {
        socket.disconnect();
      });

      document.querySelector('.logout').addEventListener('click', function (event) {
        socket.disconnect();
      });
    </script>
  </body>
</html>
