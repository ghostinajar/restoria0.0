<! -- game_terminal.ejs -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <title>Restoria 0.0.1</title>
    <link rel="stylesheet" href="styles.css" />
  </head>

  <body>
    <nav class="nav">
      <h1>Restoria 0.0.1</h1>
      <form action="/logout" method="post">
        <button class="logout" type="submit">Quit</button>
      </form>
    </nav>

    <!-- Messages and side forms -->
    <div>
      <div id="messagesContainer">
        <ul id="messages"></ul>
      </div>
      <%- include('create_mob_blueprint_form'); %>
      <%- include('create_room_form'); %>
      <%- include('create_user_form'); %>
      <%- include('edit_mob_blueprint_form'); %>
      <%- include('edit_mob_select_form'); %>
      <%- include('edit_room_form'); %>
      <%- include('edit_user_form'); %>
    </div>

    <!-- Command form -->
    <form id="commandForm" action="" autocomplete="off">
      <label for="commandInput"></label>
      <input id="commandInput" maxlength="80" />
      <button type="submit">Send</button>
    </form>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io(); // no URL needed for now; defaults to host that serves the page
      const validCommandWords = <%- JSON.stringify(validCommandWords) %>;
      const commandForm = document.getElementById("commandForm");
      const createMobForm = document.getElementById("createMobForm");
      const createRoomForm = document.getElementById("createRoomForm");
      const createUserForm = document.getElementById("createUserForm");
      const editMobBlueprintForm = document.getElementById("editMobBlueprintForm");
      let editMobId = '';
      const editMobSelect = document.getElementById("editMobSelect");
      const editRoomForm = document.getElementById("editRoomForm");
      const editUserForm = document.getElementById("editUserForm");
      const newUserName = document.getElementById("newUserName");
      const password = document.getElementById("new-password");
      const input = document.getElementById("commandInput");
      const messagesContainer = document.getElementById("messagesContainer");
      const messages = document.getElementById("messages");
      const directionSelect = document.getElementById("newRoomDirection");

      //methods definitions (validation and parsing are client version)
      function generateStringSelectOptions(stringArray, select) {
        select.options.length = 0;
        for (let i = 0; i <= stringArray.length-1; i++) {
            const option = document.createElement('option');
            option.value = stringArray[i].id;
            option.textContent = stringArray[i].value;
            select.appendChild(option);
        }
      }

      function generateNumberSelectOptions(min, max, select) {
        select.options.length = 0;
        for (let i = min; i <= max; i++) {
            const option = document.createElement('option');
            option.value = i;
            option.textContent = i;
            select.appendChild(option);
        }
      }
      generateNumberSelectOptions(1,31, document.getElementById('newMobLevel'));
      generateNumberSelectOptions(4,18, document.getElementById('newMobStr'));
      generateNumberSelectOptions(4,18, document.getElementById('newMobDex'));
      generateNumberSelectOptions(4,18, document.getElementById('newMobCon'));
      generateNumberSelectOptions(4,18, document.getElementById('newMobInt'));
      generateNumberSelectOptions(4,18, document.getElementById('newMobWis'));

      generateNumberSelectOptions(1,31, document.getElementById('editMobLevel'));
      generateNumberSelectOptions(4,18, document.getElementById('editMobStr'));
      generateNumberSelectOptions(4,18, document.getElementById('editMobDex'));
      generateNumberSelectOptions(4,18, document.getElementById('editMobCon'));
      generateNumberSelectOptions(4,18, document.getElementById('editMobInt'));
      generateNumberSelectOptions(4,18, document.getElementById('editMobWis'));

      function isValidCommandWord(commandWord) {
        if (!validCommandWords.includes(commandWord.toLowerCase())) {
          return false;
        }
        return true;
      }

      function parseCommand(command) {
        const parsedCommand = {};
        const splitCommand = command.split(" ");
        parsedCommand.commandWord = splitCommand[0];
        if (splitCommand.length > 1) {
          parsedCommand.string = splitCommand.slice(1).join(" ");
        }
        return parsedCommand;
      }

      function appendMessageToTerminal(message) {
        const item = document.createElement("li");
        item.classList.add('message-item'); // Add message-item class
        item.textContent = message.content;
        item.classList.add(message.type);
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
      }

      // Form cancel button listeners
      document.getElementById("cancelCreateMobForm").addEventListener("click", function () {
        createMobForm.style.display = "none";
      });

      document.getElementById("cancelCreateRoomForm").addEventListener("click", function () {
        createRoomForm.style.display = "none";
      });

      document.getElementById("cancelCreateUserForm").addEventListener("click", function () {
        createUserForm.style.display = "none";
      });

      document.getElementById("cancelEditMobSelect").addEventListener("click", function () {
        editMobSelect.style.display = "none";
      });

      document.getElementById("cancelEditMobBlueprintForm").addEventListener("click", function () {
        editMobBlueprintForm.style.display = "none";
      });

      document.getElementById("cancelEditUserForm").addEventListener("click", function () {
        editUserForm.style.display = "none";
      });

      document.getElementById("cancelEditRoomForm").addEventListener("click", function () {
        editRoomForm.style.display = "none";
      });

      let activeForm = editUserForm;

      // Form submit button listeners
      commandForm.addEventListener("submit", (e) => {
        e.preventDefault();
        if (input.value) {
          const parsedCommand = parseCommand(input.value);
          //reject invalid command words

          if (!isValidCommandWord(parsedCommand.commandWord)) {
            const shortenedCommand = parsedCommand.commandWord.slice(0, 10);
            appendMessageToTerminal(
              { type: "rejection", content: `Sorry, '${shortenedCommand}' is not a valid command word.` }
            );
            input.value = "";
            return;
          }
          socket.emit("userSentCommand", input.value);
          input.value = "";
        }
      });

      createMobForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const createMobFormData = {
          _id: editMobId,
          name: document.getElementById("newMobName").value,
          pronouns: Number(document.getElementById("newMobPronouns").value),
          level: Number(document.getElementById("newMobLevel").value),
          job: document.getElementById("newMobJob").value,
          statBlock: {
            strength: Number(document.getElementById("newMobStr").value),
            dexterity: Number(document.getElementById("newMobDex").value),
            constitution: Number(document.getElementById("newMobCon").value),
            intelligence: Number(document.getElementById("newMobInt").value),
            wisdom: Number(document.getElementById("newMobWis").value),
            charisma: 10,
            spirit: Number(document.getElementById("newMobSpi").value),
          },
          keywords: document.getElementById("newMobKeywords").value.split(/[ ,]+/),
          isUnique: document.getElementById("newMobIsUnique").checked,
          isMount: document.getElementById("newMobIsMount").checked,
          isAggressive: document.getElementById("newMobIsAggressive").checked,
          description: {
            look: document.getElementById("newLookMob").value,
            examine: document.getElementById("newExamineMob").value,
            study: document.getElementById("newStudyMob").value,
            research: document.getElementById("newResearchMob").value,
          },
        };
        socket.emit("userSubmittedNewMobBlueprint", createMobFormData);
        createMobForm.reset();
        createMobForm.style.display = "none"; // Hide the form after submission
      });

      createRoomForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const roomData = {
          name: document.getElementById("newRoomName").value,
          direction: document.getElementById("newRoomDirection").value,
          isDark: document.getElementById("newIsDark").checked,
          isIndoors: document.getElementById("newIsIndoors").checked,
          isOnWater: document.getElementById("newIsOnWater").checked,
          isUnderwater: document.getElementById("newIsUnderwater").checked,
          noMounts: false,
          noMobs: false,
          noMagic: false,
          noCombat: false,
          examine: document.getElementById("newExamineRoom").value,
          study: document.getElementById("newStudyRoom").value,
          research: document.getElementById("newResearchRoom").value,
        };
        socket.emit("userSubmittedNewRoom", roomData);
        createRoomForm.reset();
        createRoomForm.style.display = "none"; // Hide the form after submission
      });

      createUserForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const userData = {
          username: document.getElementById("newUserName").value.toLowerCase(),
          name: document.getElementById("newUserName").value,
          password: document.getElementById("new-password").value,
          pronouns: document.getElementById("pronouns").value,
          job: document.getElementById("job").value,
        };
        socket.emit("userSubmittedNewUser", userData);
        createUserForm.reset();
        createUserForm.style.display = "none"; // Hide the form after submission
      });

      editMobBlueprintForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const mobId = editMobId;
        const editMobBlueprintFormData = {
          name: document.getElementById("editMobName").value,
          pronouns: Number(document.getElementById("editMobPronouns").value),
          level: Number(document.getElementById("editMobLevel").value),
          job: document.getElementById("editMobJob").value,
          statBlock: {
            strength: Number(document.getElementById("editMobStr").value),
            dexterity: Number(document.getElementById("editMobDex").value),
            constitution: Number(document.getElementById("editMobCon").value),
            intelligence: Number(document.getElementById("editMobInt").value),
            wisdom: Number(document.getElementById("editMobWis").value),
            charisma: 10,
            spirit: Number(document.getElementById("editMobSpi").value),
          },
          keywords: document.getElementById("editMobKeywords").value.split(/[ ,]+/),
          isUnique: document.getElementById("editMobIsUnique").checked,
          isMount: document.getElementById("editMobIsMount").checked,
          isAggressive: document.getElementById("editMobIsAggressive").checked,
          description: {
            look: document.getElementById("editLookMob").value,
            examine: document.getElementById("editExamineMob").value,
            study: document.getElementById("editStudyMob").value,
            research: document.getElementById("editResearchMob").value,
          },
        };
        socket.emit("userSubmittedEditMobBlueprint", mobId, editMobBlueprintFormData);
        editMobBlueprintForm.reset();
        editMobBlueprintForm.style.display = "none"; // Hide the form after submission
      });

      editMobSelect.addEventListener("submit", (e) => {
        e.preventDefault();
        editMobId = document.getElementById("editMobSelectName").value;
        socket.emit("userSelectedMobEdit", editMobId);
        editMobSelect.reset();
        editMobSelect.style.display = "none"; // Hide the form after submission
      });

      editRoomForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const roomData = {
          name: document.getElementById("roomName").value,
          direction: '',
          isDark: document.getElementById("isDark").checked,
          isIndoors: document.getElementById("isIndoors").checked,
          isOnWater: document.getElementById("isOnWater").checked,
          isUnderwater: document.getElementById("isUnderwater").checked,
          noMounts: document.getElementById("noMounts").checked,
          noMobs: document.getElementById("noMobs").checked,
          noMagic: document.getElementById("noMagic").checked,
          noCombat: document.getElementById("noCombat").checked,
          examine: document.getElementById("examineRoom").value,
          study: document.getElementById("studyRoom").value,
          research: document.getElementById("researchRoom").value,
        };
        socket.emit("userSubmittedRoomEdit", roomData);
        editRoomForm.reset();
        editRoomForm.style.display = "none"; // Hide the form after submission
      });

      editUserForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const userDescription = {
          examine: document.getElementById("examineUser").value,
          study: document.getElementById("studyUser").value,
          research: document.getElementById("researchUser").value,
        };
        socket.emit("userSubmittedUserDescription", userDescription);
        editUserForm.reset();
        editUserForm.style.display = "none"; // Hide the form after submission
      });

      //socket event listeners
      socket.on("openCreateMobForm", (formData) => {
        console.log(`openCreateMobForm received formData: ${JSON.stringify(formData)}`);
        activeForm.reset();
        activeForm.style.display = "none";
        activeForm = createMobForm; 
        activeForm.style.display = "block";
        input.value = "";
      });

      socket.on("openCreateRoomForm", (formData) => {
        console.log(`openCreateRoomForm received formData: ${JSON.stringify(formData)}`);
        activeForm.reset();
        activeForm.style.display = "none";
        activeForm = createRoomForm;
        activeForm.style.display = "block";
        input.value = "";

        // Update the direction select element
        directionSelect.innerHTML = ''; // Clear existing options

        formData.unusedExits.forEach(exit => {
          const option = document.createElement('option');
          option.value = exit;
          option.textContent = exit;
          directionSelect.appendChild(option);
        });
      });

      socket.on("openCreateUserForm", () => {
        activeForm.reset();
        activeForm.style.display = "none";
        activeForm = createUserForm;
        activeForm.style.display = "block";
        input.value = "";
      });

      socket.on("openEditMobSelect", (formData) => {
        activeForm.reset();
        activeForm.style.display = "none";
        activeForm = editMobSelect;
        activeForm.style.display = "block";
        input.value = "";
        // Set the editMobSelectName options
        generateStringSelectOptions(formData, document.getElementById('editMobSelectName'))
      });
      
      socket.on("openEditMobBlueprintForm", (formData) => {
        activeForm.reset();
        activeForm.style.display = "none";
        activeForm = editMobBlueprintForm;
        activeForm.style.display = "block";
        input.value = "";
        console.log(JSON.stringify(formData));
        // Set the values of the fields based on formData
        document.getElementById("editMobName").value = formData.name || '';
        document.getElementById("editMobPronouns").value = formData.pronouns || 0;
        document.getElementById("editMobLevel").value = formData.level || 1;
        document.getElementById("editMobJob").value = formData.job || 'cleric';
        document.getElementById("editMobStr").value = formData.statBlock.strength || 4;
        document.getElementById("editMobDex").value = formData.statBlock.dexterity || 4;
        document.getElementById("editMobCon").value = formData.statBlock.constitution || 4;
        document.getElementById("editMobInt").value = formData.statBlock.intelligence || 4;
        document.getElementById("editMobWis").value = formData.statBlock.wisdom || 4;
        document.getElementById("editMobSpi").value = formData.statBlock.spirit || 0;
        document.getElementById("editMobKeywords").value = formData.keywords || '';
        document.getElementById("editMobIsUnique").checked = formData.isUnique || '';
        document.getElementById("editMobIsMount").checked = formData.isMount || '';
        document.getElementById("editMobIsAggressive").checked = formData.isAggressive || '';
        document.getElementById("editLookMob").value = formData.description.look || '';
        document.getElementById("editExamineMob").value = formData.description.examine || '';
        document.getElementById("editStudyMob").value = formData.description.study || '';
        document.getElementById("editResearchMob").value = formData.description.research || '';
      });

      socket.on("openEditUserForm", (formData) => {
        activeForm.reset();
        activeForm.style.display = "none";
        activeForm = editUserForm;
        activeForm.style.display = "block";
        input.value = "";
        // Set the values of the textareas based on formData
        document.getElementById("examineUser").value = formData.examine || '';
        document.getElementById("studyUser").value = formData.study || '';
        document.getElementById("researchUser").value = formData.research || '';
      });

      socket.on("openEditRoomForm", (formData) => {
        activeForm.reset();
        activeForm.style.display = "none";
        activeForm = editRoomForm;
        activeForm.style.display = "block";
        input.value = "";
        console.log(JSON.stringify(formData));
        // Set the values of the fields based on formData
        document.getElementById("roomName").value = formData.name || '';
        document.getElementById("isDark").checked = formData.isDark || false;
        document.getElementById("isIndoors").checked = formData.isIndoors || false;
        document.getElementById("isOnWater").checked = formData.isOnWater || false;
        document.getElementById("isUnderwater").checked = formData.isUnderwater || false;
        document.getElementById("noMounts").checked = formData.noMounts || false;
        document.getElementById("noMobs").checked = formData.noMobs || false;
        document.getElementById("noMagic").checked = formData.noMagic || false;
        document.getElementById("noCombat").checked = formData.noCombat || false;
        document.getElementById("examineRoom").value = formData.examine || '';
        document.getElementById("studyRoom").value = formData.study || '';
        document.getElementById("researchRoom").value = formData.research || '';
      });

      socket.on("invalid", (rejectionString) => {
        appendMessageToTerminal({ type: "rejection", content: "Server says invalid command." });
      });

      socket.on("redirectToLogin", () => {
        socket.disconnect();
        window.location.href = "/login";
      });

      socket.on("message", (message) => {
        appendMessageToTerminal(message);
      });

      window.addEventListener('beforeunload', function (event) {
        socket.disconnect();
      });

      document.querySelector('.logout').addEventListener('click', function (event) {
        socket.disconnect();
      });
    </script>
  </body>
</html>
