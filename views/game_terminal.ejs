<! -- game_terminal.ejs -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <title>Restoria 0.0.1</title>
    <link rel="stylesheet" href="styles.css" />
  </head>

  <body>
    <nav class="nav">
      <h1>Restoria 0.0.1</h1>
      <form action="/logout" method="post">
        <button class="logout" type="submit">Quit</button>
      </form>
    </nav>

    <div>
      <div id="messagesContainer">
      <ul id="messages"></ul>
      </div>

      <form id="createUserForm" style="display: none">
        <section>
          <label for="name">Name:</label>
          <input id="name" name="name" type="text" autocomplete="name" required />
        </section>
        <section>
          <label for="new-password">Password:</label>
          <input id="new-password" name="password" type="password" autocomplete="new-password" required />
        </section>
        <section>
          <label for="pronouns">Pronouns:</label>
          <select id="pronouns" name="pronouns" required>
            <option value="0">He/Him</option>
            <option value="1">It/It</option>
            <option value="2">She/Her</option>
            <option value="3">They/Them</option>
          </select>
        </section>
        <section>
          <label for="job">Job:</label>
          <select id="job" name="job" required>
            <option value="cleric">Cleric</option>
            <option value="mage">Mage</option>
            <option value="rogue">Rogue</option>
            <option value="warrior">Warrior</option>
          </select>
        </section>
        <button type="submit">Create Character</button>
        <button type="button" id="cancelCreateUserForm">Cancel</button>
      </form>
   </div>

    <form id="commandForm" action="">
      <label for="commandInput"></label>
      <input id="commandInput" autocomplete="off" />
      <button type="submit">Send</button>
    </form>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io(); // no URL needed for now; defaults to host that serves the page
      const validCommandWords = <%- JSON.stringify(validCommandWords) %>;
      const commandForm = document.getElementById("commandForm");
      const createUserForm = document.getElementById("createUserForm");
      const name = document.getElementById("name");
      const password = document.getElementById("new-password");
      const input= document.getElementById("commandInput");
      const messagesContainer= document.getElementById("messagesContainer");
      const messages = document.getElementById("messages");

      //methods definitions (validation and parsing are client version)
      function isValidCommandWord(commandWord) {
        if (!validCommandWords.includes(commandWord.toLowerCase())) {
          return false;
        }
        return true;
      }
      function parseCommand(command) {
        const parsedCommand = {};
        const splitCommand = command.split(" ");
        parsedCommand.commandWord = splitCommand[0];
        if (splitCommand.length > 1) {
          parsedCommand.string = splitCommand.slice(1).join(" ");
        }
        return parsedCommand;
      }
      function appendMessageToTerminal(message) {
        const item = document.createElement("li");
        item.classList.add('message-item'); // Add message-item class
        item.textContent = message.content;
        item.classList.add(message.type);
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
      }

      document
        .getElementById("cancelCreateUserForm")
        .addEventListener("click", function () {
          messagesContainer.classList.remove("makeRoom");
          createUserForm.style.display = "none";
        });

      commandForm.addEventListener("submit", (e) => {
        e.preventDefault();
        if (input.value) {
          const parsedCommand = parseCommand(input.value);
          //reject invalid command words
          if (input.value.toLowerCase() === "create character") {
            createUserForm.style.display = "block";
            messagesContainer.classList.add("makeRoom");
            input.value = "";
            return;
          }
          if (!isValidCommandWord(parsedCommand.commandWord)) {
            const shortenedCommand = parsedCommand.commandWord.slice(0, 10);
            appendMessageToTerminal(
              {type: "rejection", content: `Sorry, '${shortenedCommand}' is not a valid command word.`}
            );
            input.value = "";
            return;
          }
          socket.emit("userSentCommand", input.value);
          input.value = "";
        }
      });

      createUserForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const userData = {
          username: document.getElementById("name").value.toLowerCase(),
          name: document.getElementById("name").value,
          password: document.getElementById("new-password").value,
          pronouns: document.getElementById("pronouns").value,
          job: document.getElementById("job").value,
        };
        socket.emit("userSubmittedNewCharacter", userData);
        createUserForm.reset();
        createUserForm.style.display = "none"; // Hide the form after submission
        messagesContainer.classList.remove("makeRoom");
      });

      socket.on("invalid", (rejectionString) => {
        appendMessageToTerminal({type: "rejection", content: "Server says invalid command."});
      });

      socket.on("redirectToLogin", () => {
        // Redirect to /login
        socket.disconnect();
        window.location.href = "/login";
      });

      socket.on("message", (message) => {
        appendMessageToTerminal(message);
      });

      window.addEventListener('beforeunload', function (event) {
        socket.disconnect();
      });

      document.querySelector('.logout').addEventListener('click', function (event) {
        socket.disconnect();
      });
    </script>
  </body>
</html>
