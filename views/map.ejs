<!-- map -->
<div id="map" class="sideForm" style="display: none"></div>

<script>
  let db;
  let zoneCache = {};

  // Open (or create) the database
  let request = indexedDB.open("restoria", 1);

  request.onupgradeneeded = function (event) {
    db = event.target.result;
    // Create an object store for explored zones
    let objectStore = db.createObjectStore("exploredZones", {
      keyPath: "zoneFloor",
    });
    objectStore.createIndex("zoneFloorIndex", "zoneFloor", { unique: true });
  };

  request.onsuccess = function (event) {
    db = event.target.result;
    console.log("Database initialized!");
  };

  function handleMapTileState(mapTileState) {
    if (!db) {
      console.error("Database not initialized.");
      return;
    }

    if (!mapTileState.zone || !Array.isArray(mapTileState.mapCoords)) {
      console.error("Invalid mapTileState data:", mapTileState);
      return;
    }

    let zone = mapTileState.zone;
    let mapCoords = mapTileState.mapCoords.join(',');
    let floor = mapTileState.mapCoords[2];
    let zoneFloor = `${zone} Floor ${floor}`;

    // Remove redundant properties
    delete mapTileState.zone;
    delete mapTileState.mapCoords;

    // Update the in-memory cache
    if (!zoneCache[zoneFloor]) {
      zoneCache[zoneFloor] = { zoneFloor: zoneFloor, map: {} };
    }
    zoneCache[zoneFloor].map[mapCoords] = mapTileState;

    // Ensure the zoneFloor property is set correctly
    zoneCache[zoneFloor].zoneFloor = zoneFloor;

    // Initiate a transaction on "exploredZones" with readwrite privs
    let transaction = db.transaction(["exploredZones"], "readwrite");
    let objectStore = transaction.objectStore("exploredZones");

    // Store the updated zone data
    let putRequest = objectStore.put(zoneCache[zoneFloor]);

    putRequest.onsuccess = function (event) {
      console.log("mapTileState updated for zoneFloor:", zoneFloor, mapCoords);
    };

    putRequest.onerror = function (event) {
      console.error("Error updating mapTileState:", event.target.error);
    };

    transaction.oncomplete = function () {
      console.log("Transaction completed successfully.");
    };

    transaction.onerror = function (event) {
      console.error("Transaction error:", event.target.error);
    };
  }

  function displayMap(zone, floor) {
    if (!db) {
      console.error("Database not initialized.");
      return;
    }

    let zoneFloor = `${zone} Floor ${floor}`;
    let zoneData = zoneCache[zoneFloor];
    if (!zoneData) {
      console.error("No data found for zoneFloor:", zoneFloor);
      return;
    }

    let mapDiv = document.getElementById("map");
    mapDiv.innerHTML = ""; // Clear previous map

    for (let mapCoords in zoneData.map) {
      let mapTileState = zoneData.map[mapCoords];
      let tileDiv = document.createElement("div");
      tileDiv.className = "map-tile";
      tileDiv.style.position = "absolute";
      tileDiv.style.left = `${mapCoords.split(',')[0] * 50}px`;
      tileDiv.style.top = `${mapCoords.split(',')[1] * 50}px`;
      tileDiv.style.width = "50px";
      tileDiv.style.height = "50px";
      tileDiv.style.border = `1px solid ${mapTileState.mapTile.wallColor}`;
      tileDiv.style.color = mapTileState.mapTile.color;
      tileDiv.innerText = mapTileState.mapTile.character;

      // Add borders based on directions
      if (mapTileState.north === "wall") {
        tileDiv.style.borderTop = `1px solid ${mapTileState.mapTile.wallColor}`;
      } else if (mapTileState.north === "closed") {
        tileDiv.style.borderTop = `2px solid ${mapTileState.mapTile.wallColor}`;
      } else {
        tileDiv.style.borderTop = "none";
      }

      if (mapTileState.east === "wall") {
        tileDiv.style.borderRight = `1px solid ${mapTileState.mapTile.wallColor}`;
      } else if (mapTileState.east === "closed") {
        tileDiv.style.borderRight = `2px solid ${mapTileState.mapTile.wallColor}`;
      } else {
        tileDiv.style.borderRight = "none";
      }

      if (mapTileState.south === "wall") {
        tileDiv.style.borderBottom = `1px solid ${mapTileState.mapTile.wallColor}`;
      } else if (mapTileState.south === "closed") {
        tileDiv.style.borderBottom = `2px solid ${mapTileState.mapTile.wallColor}`;
      } else {
        tileDiv.style.borderBottom = "none";
      }

      if (mapTileState.west === "wall") {
        tileDiv.style.borderLeft = `1px solid ${mapTileState.mapTile.wallColor}`;
      } else if (mapTileState.west === "closed") {
        tileDiv.style.borderLeft = `2px solid ${mapTileState.mapTile.wallColor}`;
      } else {
        tileDiv.style.borderLeft = "none";
      }

      mapDiv.appendChild(tileDiv);
    }

    mapDiv.style.display = "block"; // Show the map
  }

  socket.on("mapTileState", function (mapTileState) {
    handleMapTileState(mapTileState);
  });

  socket.on("mapRequest", function (mapTileState) {
    handleMapTileState(mapTileState);
    displayMap(mapTileState.zone, mapTileState.mapCoords[2]);
  });
</script>
