<!-- suggestions_form -->
<form
  id="suggestionsForm"
  class="sideForm"
  style="display: none"
  autocomplete="off"
>
  <ul>
    <li>
      <a class="cancelButton" id="cancelSuggestions"> Cancel </a>
    </li>
  </ul>

  
  <section >  
    <ul>
      <li style="display: inline-block;"><h2style="display: inline-block;">Suggestions</h2>
        <button style="margin-left: 0; margin-top: 0.5rem; display: inline-block" type="submit">
          Save Suggestions
        </button>
      </li>
    </ul>
  </section>
  <!-- <div class="tabs">
    <button
      id="suggestionsRoomsTab"
      type="button"
      class="tab-link suggestions-tab-link active"
      data-tab="suggestionsRoomsSection"
    >
      Rooms
    </button>
    <button
      id="suggestionsItemBlueprintsTab"
      type="button"
      class="tab-link suggestions-tab-link"
      data-tab="suggestionsItemBlueprintsSection"
    >
      Item Blueprints
    </button>
    <button
      id="suggestionsMobBlueprintsTab"
      type="button"
      class="tab-link suggestions-tab-link"
      data-tab="suggestionsMobBlueprintsSection"
    >
      Mob Blueprints
    </button>
  </div> -->

  <!-- TODO remove this in future when suggestions are grouped by tabs -->
  <ul class="suggestionsList" id="suggestionsList">
    <!-- loaded via script -->
  </ul>

  <!-- <section
    class="tab-content suggestions-tab-content"
    id="suggestionsRoomsSection"
    style="display: block"
  >
    <h3>Room Suggestions</h3>
    <ul class="suggestionsList" id="suggestionsRoomsList">
    </ul>
  </section> -->

  <!-- <section
    class="tab-content suggestions-tab-content"
    id="suggestionsItemBlueprintsSection"
    style="display: none"
  >
    <h3>Item Blueprint Suggestions</h3>
    <ul class="suggestionsList" id="suggestionsItemBlueprintsList">
    </ul>
  </section> -->

  <!-- <section
    class="tab-content suggestions-tab-content"
    id="suggestionsMobBlueprintsSection"
    style="display: none"
  >
    <h3>Mob Blueprint Suggestions</h3>
    <ul class="suggestionsList" id="suggestionsMobBlueprintsList">
    </ul>
  </section> -->

</form>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const suggestionsForm = document.getElementById("suggestionsForm");
    // const suggestionsTabLinks = document.querySelectorAll(
    //   ".suggestions-tab-link"
    // );
    // const suggestionsTabContents = document.querySelectorAll(
    //   ".suggestions-tab-content"
    // );
    // const suggestionsRoomsTab = document.getElementById("suggestionsRoomsTab");
    // const suggestionsItemBlueprintsTab = document.getElementById(
    //   "suggestionsItemBlueprintsTab"
    // );
    // const suggestionsMobBlueprintsTab = document.getElementById(
    //   "suggestionsMobBlueprintsTab"
    // );

    const suggestionsList = document.getElementById("suggestionsList");

    // const suggestionsRoomList = document.getElementById(
    //   "suggestionsRoomList"
    // );
    // const suggestionsItemBlueprintsList = document.getElementById(
    //   "suggestionsItemBlueprintsList"
    // );
    // const suggestionsMobBlueprintsList = document.getElementById(
    //   "suggestionsMobBlueprintsList"
    // );

    // help arrays to message user when they click each tab
    const suggestionsHelp = [
      `================================= Suggestions =================================`,
      `<span style="color:var(--red)">Complete:</span> marks a suggestion complete. Click after making the suggested change.`,
      `<span style="color:var(--red)">Decline:</span> marks a suggestion declined. You chose not to take this suggestion.`,
      `<span style="color:var(--red)">Save Suggestions:</span> After you click complete/decline on suggestions, click this`,
      `button, or the suggestions will remain on "pending" status.`,
    ];

    // to hold data from server on "edit item" command
    let suggestions;
    // let roomSuggestions;
    // let itemBlueprintSuggestions;
    // let mobBlueprintSuggestions;
    // let completedSuggestions;
    // let discardedSuggestions;
    let roomNames;
    let itemBlueprintNames;
    let mobBlueprintNames;

    // // Tab menu listeners
    // suggestionsTabLinks.forEach((link) => {
    //   link.addEventListener("click", function () {
    //     // Remove active class from all tab links and sections
    //     suggestionsTabLinks.forEach((link) => link.classList.remove("active"));
    //     suggestionsTabContents.forEach((section) =>
    //       section.classList.remove("active")
    //     );
    //     suggestionsTabContents.forEach(
    //       (section) => (section.style.display = "none")
    //     );

    //     // Add active class to the clicked tab and corresponding section
    //     this.classList.add("active");
    //     const target = document.getElementById(this.getAttribute("data-tab"));
    //     target.classList.add("active");
    //     target.style.display = "block";
    //   });
    // });

    suggestionsForm.addEventListener("submit", (e) => {
      e.preventDefault();
      // suggestions = [
      //   ...roomSuggestions,
      //   ...itemBlueprintSuggestions,
      //   ...mobBlueprintSuggestions,
      // ];
      console.log(suggestions);
      socket.emit("userSubmittedSuggestions", suggestions);

      suggestionsForm.reset();
      suggestionsForm.style.display = "none";
    });

    document
      .getElementById("cancelSuggestions")
      .addEventListener("click", function () {
        suggestionsForm.style.display = "none";
      });

    socket.on("openSuggestionsForm", (formData) => {
      suggestions = formData.suggestions;
      sortSuggestions(suggestions);
      itemBlueprintNames = formData.itemBlueprintNames;
      mobBlueprintNames = formData.mobBlueprintNames;
      roomNames = formData.roomNames;

      suggestionsForm.reset();
      clearUl(suggestionsList);
      loadSuggestionsToUlElement(suggestionsList, suggestions, [
        ...itemBlueprintNames,
        ...mobBlueprintNames,
        ...roomNames,
      ]);

      //reset/hide open forms, show suggestionsForm
      activeForm.reset();
      activeForm.style.display = "none";
      activeForm = suggestionsForm;
      activeForm.style.display = "block";
      // document.querySelector("#suggestionsRoomsTab").click();
      input.value = "";

      showHelpArray(suggestionsHelp);
    });

    function loadSuggestionsToUlElement(ulElement, suggestions, objectList) {
      for (let suggestion of suggestions) {
        addSuggestionToUlElement(
          ulElement,
          suggestion,
          suggestions,
          objectList
        );
      }
    }

    function addSuggestionToUlElement(
      ulElement,
      suggestion,
      suggestions,
      objectList
    ) {
      // Create a new <li> element
      const liElement = document.createElement("li");
      liElement.className = "suggestion";
      suggestionName = objectList.find(
        (object) => object._id === suggestion.refersToId
      ).name;

      liElement.innerHTML = `
        <div class="suggestionInfo">
          <span class="suggestionName">${suggestionName}</span>
          <span class="suggestionId">id: ${suggestion.refersToId}</span>
          <span class="suggestionBody">${suggestion.body}</span>
        </div>
        `;

      const divElement = document.createElement("div");
      divElement.className = "suggestionButtonsContainer";

      const completeButton = document.createElement("button");
      completeButton.textContent = "☐completed";
      completeButton.className = "completeSuggestion";
      completeButton.type = "button";

      const declineButton = document.createElement("button");
      declineButton.textContent = "☐declined";
      declineButton.className = "declineSuggestion";
      declineButton.type = "button";

      completeButton.onclick = function (event) {
        handleSuggestionButtonClick(
          event,
          "complete",
          declineButton,
          suggestion
        );
      };
      declineButton.onclick = function (event) {
        handleSuggestionButtonClick(
          event,
          "decline",
          completeButton,
          suggestion
        );
      };

      if (suggestion.status === "completed") {
        completeButton.click();
      }
      if (suggestion.status === "declined") {
        declineButton.click();
      }

      function handleSuggestionButtonClick(
        event,
        buttonType,
        otherButton,
        suggestion
      ) {
        const buttonClicked = event.target;

        if (buttonType === "complete") {
          buttonClicked.textContent = "☑completed";
          buttonClicked.className = "checkedSuggestion";
          suggestion.status = "completed";
          otherButton.className = "declineSuggestion";
          otherButton.textContent = "☐decline";
        } else if (buttonType === "decline") {
          buttonClicked.textContent = "☒declined";
          buttonClicked.className = "checkedSuggestion";
          suggestion.status = "declined";
          completeButton.className = "completeSuggestion";
          completeButton.textContent = "☐complete";
        }
      }

      divElement.appendChild(completeButton);
      divElement.appendChild(declineButton);
      liElement.appendChild(divElement);
      ulElement.appendChild(liElement);
    }

    function sortSuggestions(suggestions) {
      const order = { "pending": 0, "completed": 1, "declined": 2 };
      suggestions.sort((a, b) => order[a.status] - order[b.status]);
    }

  });
</script>
