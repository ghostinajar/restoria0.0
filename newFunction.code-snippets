{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Function Template": {
    "prefix": "funcTemplate", // Shortcut to trigger the snippet
    "body": [
      "// $1",
      "// $2",
      "",
      "import { IUser } from \"../model/classes/User.js\";",
      "import catchErrorHandlerForFunction from \"./catchErrorHandlerForFunction.js\";",
      "",
      "async function $1(user: IUser) {",
      "  try {",
      "    $3",
      "  } catch (error: unknown) {",
      "    catchErrorHandlerForFunction(`$1`, error, user?.name);",
      "  }",
      "}",
      "",
      "export default $1;"
    ],
    "description": "Template for an async function with error handling"
  },
  "Try-Catch Template": {
    "prefix": "tryCatchTemplate",
    "body": [
      "try {",
      "  $1",
      "} catch (error: unknown) {",
      "  catchErrorHandlerForFunction(`$2`, error, user?.name);",
      "}"
    ],
    "description": "Template for a try-catch block with error handling"
  }
}